[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to etn","title":"Contributing to etn","text":"First , thanks considering contributing etn! üëç ‚Äôs people like make rewarding us - project maintainers - work etn. üòä etn open source project, maintained people care. directly funded .","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to etn","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"/CONTRIBUTING.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How you can contribute","title":"Contributing to etn","text":"several ways can contribute project. want know contribute open source projects like one, see Open Source Guide.","code":""},{"path":"/CONTRIBUTING.html","id":"share-the-love","dir":"","previous_headings":"How you can contribute","what":"Share the love ‚ù§Ô∏è","title":"Contributing to etn","text":"Think etn useful? Let others discover , telling person, via Twitter blog post. Using etn paper writing? Consider citing .","code":""},{"path":"/CONTRIBUTING.html","id":"ask-a-question","dir":"","previous_headings":"How you can contribute","what":"Ask a question ‚ÅâÔ∏è","title":"Contributing to etn","text":"Using etn got stuck? Browse documentation see can find solution. Still stuck? Post question issue GitHub. offer user support, ‚Äôll try best address , questions often lead better documentation discovery bugs. Want ask question private? Contact package maintainer email.","code":""},{"path":"/CONTRIBUTING.html","id":"propose-an-idea","dir":"","previous_headings":"How you can contribute","what":"Propose an idea üí°","title":"Contributing to etn","text":"idea new etn feature? Take look documentation issue list see isn‚Äôt included suggested yet. , suggest idea issue GitHub. can‚Äôt promise implement idea, helps : Explain detail work. Keep scope narrow possible. See want contribute code idea well.","code":""},{"path":"/CONTRIBUTING.html","id":"report-a-bug","dir":"","previous_headings":"How you can contribute","what":"Report a bug üêõ","title":"Contributing to etn","text":"Using etn discovered bug? ‚Äôs annoying! Don‚Äôt let others experience report issue GitHub can fix . good bug report makes easier us , please include: operating system name version (e.g.¬†Mac OS 10.13.6). details local setup might helpful troubleshooting. Detailed steps reproduce bug.","code":""},{"path":"/CONTRIBUTING.html","id":"improve-the-documentation","dir":"","previous_headings":"How you can contribute","what":"Improve the documentation üìñ","title":"Contributing to etn","text":"Noticed typo website? Think function use better example? Good documentation makes difference, help improve welcome!","code":""},{"path":"/CONTRIBUTING.html","id":"the-website","dir":"","previous_headings":"How you can contribute > Improve the documentation üìñ","what":"The website","title":"Contributing to etn","text":"website generated pkgdown. means don‚Äôt write html: content pulled together documentation code, vignettes, Markdown files, package DESCRIPTION _pkgdown.yml settings. know way around pkgdown, can propose file change improve documentation. , report issue can point right direction.","code":""},{"path":"/CONTRIBUTING.html","id":"function-documentation","dir":"","previous_headings":"How you can contribute > Improve the documentation üìñ","what":"Function documentation","title":"Contributing to etn","text":"Functions described comments near code translated documentation using roxygen2. want improve function description: Go R/ directory code repository. Look file name function. Propose file change update function documentation roxygen comments (starting #').","code":""},{"path":"/CONTRIBUTING.html","id":"contribute-code","dir":"","previous_headings":"How you can contribute","what":"Contribute code üìù","title":"Contributing to etn","text":"Care fix bugs implement new functionality etn? Awesome! üëè look issue list leave comment things want work . See also development guidelines .","code":""},{"path":"/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to etn","text":"try follow GitHub flow development. Fork repo clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream master. Open RStudio project file (.Rproj). Write code. Test code (bonus points adding unit tests). Document code (see function documentation ). R CMD check using devtools::check() aim 0 errors warnings. Commit push changes. Submit pull request.","code":""},{"path":"/articles/acoustic_telemetry.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Explore acoustic telemetry data","text":"vignette show typical workflow using etn package retrieve acoustic telemetry data ETN. also use packages dplyr data exploration, lubridate handle datetime data leaflet interactive visualizations. start, load etn package: packages (installation necessary): Connect user credentials (received VLIZ) database. expose confidential information, opt use environment variables: Using con variable store collection mandatory, makes life much easier con default value argument connection, present every function package.","code":"library(etn) other_pkgs <- c(\"dplyr\", \"lubridate\", \"leaflet\")  # install missing packages pkgs_to_install <- other_pkgs[!other_pkgs %in% rownames(installed.packages())] install.packages(pkgs_to_install)  # load packages library(dplyr) library(lubridate) library(leaflet) con <- connect_to_etn(Sys.getenv(\"userid\"), Sys.getenv(\"pwd\")) # This is the default, so you could also use connect_to_etn()"},{"path":"/articles/acoustic_telemetry.html","id":"select-projects-of-interest","dir":"Articles","previous_headings":"","what":"Select project(s) of interest","title":"Explore acoustic telemetry data","text":"researcher typically works context one animal projects. project codes always easy remember, let‚Äôs start getting overview projects: Show preview: know project code already just interested get information , can specify get_animal_projects() function directly: exactly retrieving projects first filtering afterwards based column project_code: list available animal project codes vector, can use list_animal_project_codes(), one etn functions list_* family:","code":"all_projects <- get_animal_projects() all_projects %>% head(10) ## # A tibble: 10 √ó 11 ##    proje‚Ä¶¬π proje‚Ä¶¬≤ proje‚Ä¶¬≥ telem‚Ä¶‚Å¥ proje‚Ä¶‚Åµ start_date end_date   latit‚Ä¶‚Å∂ longi‚Ä¶‚Å∑ ##      <int> <chr>   <chr>   <chr>   <chr>   <date>     <date>       <dbl>   <dbl> ##  1     793 2004_G‚Ä¶ animal  Acoust‚Ä¶ 2004_G‚Ä¶ 2004-01-01 2005-12-31    56.4    9.91 ##  2      16 2010_p‚Ä¶ animal  Acoust‚Ä¶ 2010_p‚Ä¶ 2010-08-01 2012-10-30    NA     NA    ##  3     841 2010_p‚Ä¶ animal  Acoust‚Ä¶ 2010_p‚Ä¶ 2010-08-01 2012-10-30    NA     NA    ##  4     760 2011_L‚Ä¶ animal  Acoust‚Ä¶ 2011_L‚Ä¶ 2011-11-11 2012-02-25    47.3   -1.98 ##  5      20 2011_r‚Ä¶ animal  Acoust‚Ä¶ 2011 R‚Ä¶ 2011-01-01 2012-09-03    NA     NA    ##  6     754 2011_W‚Ä¶ animal  Acoust‚Ä¶ 2011_W‚Ä¶ 2011-06-01 2012-10-12    54.1   12.1  ##  7      15 2012_l‚Ä¶ animal  Acoust‚Ä¶ 2012 L‚Ä¶ 2012-01-01 2016-01-18    NA     NA    ##  8      18 2013_a‚Ä¶ animal  Acoust‚Ä¶ 2013 A‚Ä¶ 2013-10-10 2018-12-31    NA     NA    ##  9     757 2013_F‚Ä¶ animal  Acoust‚Ä¶ 2013_F‚Ä¶ 2013-07-01 2014-03-01    54.9   -7.39 ## 10      21 2014_d‚Ä¶ animal  Acoust‚Ä¶ 2014 D‚Ä¶ 2014-04-10 2015-02-13    NA     NA    ## # ‚Ä¶ with 2 more variables: moratorium <chr>, imis_dataset_id <int>, and ## #   abbreviated variable names ¬π‚Äãproject_id, ¬≤‚Äãproject_code, ¬≥‚Äãproject_type, ## #   ‚Å¥‚Äãtelemetry_type, ‚Åµ‚Äãproject_name, ‚Å∂‚Äãlatitude, ‚Å∑‚Äãlongitude projects_code <- c(\"2014_demer\", \"2015_dijle\") projects_study <- get_animal_projects(animal_project_code = projects_code) projects_study ## # A tibble: 2 √ó 11 ##   projec‚Ä¶¬π proje‚Ä¶¬≤ proje‚Ä¶¬≥ telem‚Ä¶‚Å¥ proje‚Ä¶‚Åµ start_date end_date   latit‚Ä¶‚Å∂ longi‚Ä¶‚Å∑ ##      <int> <chr>   <chr>   <chr>   <chr>   <date>     <date>       <dbl>   <dbl> ## 1       21 2014_d‚Ä¶ animal  Acoust‚Ä¶ 2014 D‚Ä¶ 2014-04-10 2015-02-13      NA      NA ## 2       22 2015_d‚Ä¶ animal  Acoust‚Ä¶ 2015 D‚Ä¶ 2015-04-16 2018-12-31      NA      NA ## # ‚Ä¶ with 2 more variables: moratorium <chr>, imis_dataset_id <int>, and ## #   abbreviated variable names ¬π‚Äãproject_id, ¬≤‚Äãproject_code, ¬≥‚Äãproject_type, ## #   ‚Å¥‚Äãtelemetry_type, ‚Åµ‚Äãproject_name, ‚Å∂‚Äãlatitude, ‚Å∑‚Äãlongitude all_projects %>%   filter(project_code %in% c(projects_code)) ## # A tibble: 2 √ó 11 ##   projec‚Ä¶¬π proje‚Ä¶¬≤ proje‚Ä¶¬≥ telem‚Ä¶‚Å¥ proje‚Ä¶‚Åµ start_date end_date   latit‚Ä¶‚Å∂ longi‚Ä¶‚Å∑ ##      <int> <chr>   <chr>   <chr>   <chr>   <date>     <date>       <dbl>   <dbl> ## 1       21 2014_d‚Ä¶ animal  Acoust‚Ä¶ 2014 D‚Ä¶ 2014-04-10 2015-02-13      NA      NA ## 2       22 2015_d‚Ä¶ animal  Acoust‚Ä¶ 2015 D‚Ä¶ 2015-04-16 2018-12-31      NA      NA ## # ‚Ä¶ with 2 more variables: moratorium <chr>, imis_dataset_id <int>, and ## #   abbreviated variable names ¬π‚Äãproject_id, ¬≤‚Äãproject_code, ¬≥‚Äãproject_type, ## #   ‚Å¥‚Äãtelemetry_type, ‚Åµ‚Äãproject_name, ‚Å∂‚Äãlatitude, ‚Å∑‚Äãlongitude list_animal_project_codes() %>% head(10) ##  [1] \"2004_Gudena\"           \"2010_phd_reubens\"      \"2010_phd_reubens_sync\" ##  [4] \"2011_Loire\"            \"2011_rivierprik\"       \"2011_Warnow\"           ##  [7] \"2012_leopoldkanaal\"    \"2013_albertkanaal\"     \"2013_Foyle\"            ## [10] \"2014_demer\""},{"path":"/articles/acoustic_telemetry.html","id":"animals","dir":"Articles","previous_headings":"","what":"Animals","title":"Explore acoustic telemetry data","text":"using get_animals() can retrieve information animal (animal_id), scientific name, length, capture/release date location, attached tag(s) (tag_serial_number): species many individuals tracked projects 2014_demer 2015_dijle?","code":"animals <- get_animals(animal_project_code = projects_code) animals %>% head(10) ## # A tibble: 10 √ó 66 ##    animal_id animal_pr‚Ä¶¬π tag_s‚Ä¶¬≤ tag_t‚Ä¶¬≥ tag_s‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ scien‚Ä¶‚Å∑ commo‚Ä¶‚Å∏ ##        <int> <chr>       <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   ##  1       304 2014_demer  1187449 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   ##  2       384 2014_demer  1157781 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ ##  3       385 2014_demer  1157782 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ ##  4       386 2014_demer  1157783 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ ##  5       305 2014_demer  1187450 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   ##  6       383 2014_demer  1157780 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Squali‚Ä¶ chub    ##  7       369 2014_demer  1171781 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ ##  8       370 2014_demer  1171782 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ ##  9       365 2014_demer  1171775 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ ## 10       366 2014_demer  1171776 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ ## # ‚Ä¶ with 57 more variables: aphia_id <int>, animal_label <chr>, ## #   animal_nickname <chr>, tagger <chr>, capture_date_time <dttm>, ## #   capture_location <chr>, capture_latitude <dbl>, capture_longitude <dbl>, ## #   capture_method <chr>, capture_depth <chr>, ## #   capture_temperature_change <chr>, release_date_time <dttm>, ## #   release_location <chr>, release_latitude <dbl>, release_longitude <dbl>, ## #   recapture_date_time <dttm>, length1_type <chr>, length1 <dbl>, ‚Ä¶ animals %>%   count(scientific_name) ## # A tibble: 7 √ó 2 ##   scientific_name        n ##   <chr>              <int> ## 1 Anguilla anguilla      1 ## 2 Cyprinus carpio        2 ## 3 Petromyzon marinus     2 ## 4 Platichthys flesus     8 ## 5 Rutilus rutilus        6 ## 6 Silurus glanis        20 ## 7 Squalius cephalus      3"},{"path":"/articles/acoustic_telemetry.html","id":"detections","dir":"Articles","previous_headings":"","what":"Detections","title":"Explore acoustic telemetry data","text":"Let‚Äôs say interested tracking data Wels catfish (Silurus glanis) 2014. can retrieve detection history using get_acoustic_detections(): Preview: individuals detected (animal_id) period? Notice group animal_id, unique identifier fish. However, fish tagged (typically occurs), use acoustic_tag_id well, .e.¬†identifier picked acoustic receivers: can also get tracking duration fish: many times individual detected?","code":"detections_silurus <- get_acoustic_detections(   animal_project_code = projects_code,   start_date = \"2014-01-01\",   end_date = \"2015-01-01\", # The end date is exclusive   scientific_name = \"Silurus glanis\" ) detections_silurus %>% head(10) ## # A tibble: 10 √ó 20 ##    detecti‚Ä¶¬π date_time           tag_s‚Ä¶¬≤ acous‚Ä¶¬≥ anima‚Ä¶‚Å¥ anima‚Ä¶‚Åµ scien‚Ä¶‚Å∂ acous‚Ä¶‚Å∑ ##        <int> <dttm>              <chr>   <chr>   <chr>     <int> <chr>   <chr>   ##  1  22402411 2014-05-26 21:49:00 1171775 A69-16‚Ä¶ 2014_d‚Ä¶     365 Siluru‚Ä¶ demer   ##  2  22207337 2014-05-26 21:49:20 1171775 A69-16‚Ä¶ 2014_d‚Ä¶     365 Siluru‚Ä¶ demer   ##  3  20620757 2014-05-26 22:00:00 1171775 A69-16‚Ä¶ 2014_d‚Ä¶     365 Siluru‚Ä¶ demer   ##  4  21701322 2014-05-26 22:00:08 1171775 A69-16‚Ä¶ 2014_d‚Ä¶     365 Siluru‚Ä¶ demer   ##  5  20604027 2014-05-26 22:08:00 1171775 A69-16‚Ä¶ 2014_d‚Ä¶     365 Siluru‚Ä¶ demer   ##  6  21283233 2014-05-26 22:08:12 1171775 A69-16‚Ä¶ 2014_d‚Ä¶     365 Siluru‚Ä¶ demer   ##  7  22131424 2014-05-26 22:14:00 1171775 A69-16‚Ä¶ 2014_d‚Ä¶     365 Siluru‚Ä¶ demer   ##  8  22454253 2014-05-26 22:14:24 1171775 A69-16‚Ä¶ 2014_d‚Ä¶     365 Siluru‚Ä¶ demer   ##  9  22402759 2014-05-26 22:20:00 1171775 A69-16‚Ä¶ 2014_d‚Ä¶     365 Siluru‚Ä¶ demer   ## 10  21751235 2014-05-26 22:20:19 1171775 A69-16‚Ä¶ 2014_d‚Ä¶     365 Siluru‚Ä¶ demer   ## # ‚Ä¶ with 12 more variables: receiver_id <chr>, station_name <chr>, ## #   deploy_latitude <dbl>, deploy_longitude <dbl>, sensor_value <dbl>, ## #   sensor_unit <chr>, sensor2_value <dbl>, sensor2_unit <chr>, ## #   signal_to_noise_ratio <int>, source_file <chr>, qc_flag <chr>, ## #   deployment_id <int>, and abbreviated variable names ¬π‚Äãdetection_id, ## #   ¬≤‚Äãtag_serial_number, ¬≥‚Äãacoustic_tag_id, ‚Å¥‚Äãanimal_project_code, ‚Åµ‚Äãanimal_id, ## #   ‚Å∂‚Äãscientific_name, ‚Å∑‚Äãacoustic_project_code detections_silurus_period <-   detections_silurus %>%   mutate(date = date(date_time)) %>%   group_by(animal_id) %>%   summarize(     start = min(date),     end = max(date)   ) detections_silurus_period ## # A tibble: 9 √ó 3 ##   animal_id start      end        ##       <int> <date>     <date>     ## 1       365 2014-05-26 2014-11-16 ## 2       366 2014-05-26 2014-09-22 ## 3       367 2014-06-18 2014-06-19 ## 4       368 2014-05-26 2014-09-01 ## 5       369 2014-05-21 2014-07-01 ## 6       370 2014-05-20 2014-11-16 ## 7       384 2014-04-24 2014-04-26 ## 8       385 2014-04-24 2014-12-19 ## 9       386 2014-04-24 2014-12-28 detections_silurus %>%   mutate(date = date(date_time)) %>%   group_by(acoustic_tag_id) %>%   summarize(     start = min(date),     end = max(date)   ) ## # A tibble: 9 √ó 3 ##   acoustic_tag_id start      end        ##   <chr>           <date>     <date>     ## 1 A69-1601-26529  2014-05-26 2014-11-16 ## 2 A69-1601-26530  2014-05-26 2014-09-22 ## 3 A69-1601-26531  2014-06-18 2014-06-19 ## 4 A69-1601-26534  2014-05-26 2014-09-01 ## 5 A69-1601-26535  2014-05-21 2014-07-01 ## 6 A69-1601-26536  2014-05-20 2014-11-16 ## 7 A69-1601-28296  2014-04-24 2014-04-26 ## 8 A69-1601-28297  2014-04-24 2014-12-19 ## 9 A69-1601-28298  2014-04-24 2014-12-28 detections_silurus_duration <-   detections_silurus %>%   group_by(animal_id) %>%   summarize(duration = max(date_time) - min(date_time)) detections_silurus_duration ## # A tibble: 9 √ó 2 ##   animal_id duration        ##       <int> <drtn>          ## 1       365 173.143345 days ## 2       366 118.459780 days ## 3       367   1.589421 days ## 4       368  98.322998 days ## 5       369  41.792720 days ## 6       370 179.210486 days ## 7       384   1.435150 days ## 8       385 238.517766 days ## 9       386 248.323808 days detections_silurus %>%   group_by(animal_id) %>%   count() ## # A tibble: 9 √ó 2 ## # Groups:   animal_id [9] ##   animal_id     n ##       <int> <int> ## 1       365  4872 ## 2       366  2778 ## 3       367   497 ## 4       368  7690 ## 5       369  1183 ## 6       370  4462 ## 7       384  2563 ## 8       385 29068 ## 9       386 18478"},{"path":"/articles/acoustic_telemetry.html","id":"stations","dir":"Articles","previous_headings":"","what":"Stations","title":"Explore acoustic telemetry data","text":"many detection stations individuals detected? stations involved? can retrieve using list_values function applied column station_name: Notice detection station can linked multiple deployments: Sometimes ‚Äôs interesting know number detections per station: ‚Äôs also interesting know number unique individuals per station:","code":"detections_silurus %>%   group_by(animal_id) %>%   distinct(station_name) %>%   count() ## # A tibble: 9 √ó 2 ## # Groups:   animal_id [9] ##   animal_id     n ##       <int> <int> ## 1       365    16 ## 2       366     9 ## 3       367     1 ## 4       368    23 ## 5       369     9 ## 6       370    18 ## 7       384     1 ## 8       385    18 ## 9       386    15 stations_silurus <-   detections_silurus %>%   list_values(station_name) ## 23 unique station_name values stations_silurus ##  [1] \"de-8\"   \"de-9\"   \"de-7\"   \"de-10\"  \"de-12\"  \"de-14\"  \"de-14a\" \"de-5\"   ##  [9] \"de-11\"  \"de-13\"  \"s-2a\"   \"de-18\"  \"de-19\"  \"de-20\"  \"de-3\"   \"de-2\"   ## [17] \"de-6\"   \"de-4\"   \"de-1\"   \"de-21\"  \"de-22\"  \"de-23\"  \"de-16\" detections_silurus %>%   distinct(station_name, deployment_id) %>%   group_by(station_name) %>%   add_tally() %>%   arrange(desc(n)) ## # A tibble: 33 √ó 3 ## # Groups:   station_name [23] ##    station_name deployment_id     n ##    <chr>                <int> <int> ##  1 de-12                 2938     3 ##  2 de-12                 1656     3 ##  3 de-12                 1470     3 ##  4 de-8                  1427     2 ##  5 de-9                  1437     2 ##  6 de-7                  1378     2 ##  7 de-14                 1433     2 ##  8 de-14a                1431     2 ##  9 de-3                  1381     2 ## 10 de-3                  2869     2 ## # ‚Ä¶ with 23 more rows n_detect_station <-    detections_silurus %>%   group_by(station_name) %>%   count() n_detect_station ## # A tibble: 23 √ó 2 ## # Groups:   station_name [23] ##    station_name     n ##    <chr>        <int> ##  1 de-1           368 ##  2 de-10         1681 ##  3 de-11          163 ##  4 de-12         4203 ##  5 de-13          166 ##  6 de-14        13353 ##  7 de-14a        6604 ##  8 de-16          591 ##  9 de-18          148 ## 10 de-19          650 ## # ‚Ä¶ with 13 more rows n_silurus_station <-    detections_silurus %>%   distinct(station_name, animal_id) %>%   group_by(station_name) %>%   count() n_silurus_station ## # A tibble: 23 √ó 2 ## # Groups:   station_name [23] ##    station_name     n ##    <chr>        <int> ##  1 de-1             3 ##  2 de-10            6 ##  3 de-11            4 ##  4 de-12            5 ##  5 de-13            4 ##  6 de-14            6 ##  7 de-14a           6 ##  8 de-16            4 ##  9 de-18            3 ## 10 de-19            5 ## # ‚Ä¶ with 13 more rows"},{"path":"/articles/acoustic_telemetry.html","id":"acoustic-tags","dir":"Articles","previous_headings":"","what":"Acoustic tags","title":"Explore acoustic telemetry data","text":"get information tags involved detections_silurus, can use function get_tags, returns tag related information serial number, manufacturer, model, frequency: can also retrieve information tag_serial_number: However, keep mind fundamental difference arguments acoustic_tag_id tag_serial_number: tag_serial_number identifies device, contain multiple tags sensors thus multiple acoustic_tag_id. possible acoustic_tag_id can retrieved correspondent list_* function:","code":"tags_id <- list_values(detections_silurus, acoustic_tag_id) ## 9 unique acoustic_tag_id values tags_silurus <- get_tags(acoustic_tag_id = tags_id) tags_silurus ## # A tibble: 9 √ó 54 ##   tag_ser‚Ä¶¬π tag_t‚Ä¶¬≤ tag_s‚Ä¶¬≥ senso‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ manuf‚Ä¶‚Å∑ model frequ‚Ä¶‚Å∏ status ##   <chr>     <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr> <chr>   <chr>  ## 1 1157781   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 2 1157782   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 3 1157783   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 4 1171775   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 5 1171776   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 6 1171777   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 7 1171780   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 8 1171781   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 9 1171782   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## # ‚Ä¶ with 44 more variables: activation_date <dttm>, ## #   battery_estimated_life <chr>, battery_estimated_end_date <dttm>, ## #   length <dbl>, diameter <dbl>, weight <dbl>, floating <chr>, ## #   archive_memory <chr>, sensor_slope <dbl>, sensor_intercept <dbl>, ## #   sensor_range <chr>, sensor_range_min <dbl>, sensor_range_max <dbl>, ## #   sensor_resolution <dbl>, sensor_unit <chr>, sensor_accuracy <dbl>, ## #   sensor_transmit_ratio <int>, accelerometer_algorithm <chr>, ‚Ä¶ tags_serial <- unique(detections_silurus$tag_serial_number) tags_silurus <- get_tags(tag_serial_number = tags_serial) tags_silurus ## # A tibble: 9 √ó 54 ##   tag_ser‚Ä¶¬π tag_t‚Ä¶¬≤ tag_s‚Ä¶¬≥ senso‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ manuf‚Ä¶‚Å∑ model frequ‚Ä¶‚Å∏ status ##   <chr>     <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr> <chr>   <chr>  ## 1 1157781   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 2 1157782   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 3 1157783   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 4 1171775   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 5 1171776   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 6 1171777   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 7 1171780   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 8 1171781   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## 9 1171782   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ 069k    avail‚Ä¶ ## # ‚Ä¶ with 44 more variables: activation_date <dttm>, ## #   battery_estimated_life <chr>, battery_estimated_end_date <dttm>, ## #   length <dbl>, diameter <dbl>, weight <dbl>, floating <chr>, ## #   archive_memory <chr>, sensor_slope <dbl>, sensor_intercept <dbl>, ## #   sensor_range <chr>, sensor_range_min <dbl>, sensor_range_max <dbl>, ## #   sensor_resolution <dbl>, sensor_unit <chr>, sensor_accuracy <dbl>, ## #   sensor_transmit_ratio <int>, accelerometer_algorithm <chr>, ‚Ä¶ list_acoustic_tag_ids() %>% head(10) ##  [1] \"\\\"A69-1602\\\"-34214\" \"\\\"A69-1602\\\"-34215\" \"\\\"A69-1602\\\"-34216\" ##  [4] \"\\\"A69-1602\\\"-34217\" \"\\\"A69-1602\\\"-34218\" \"\\\"A69-1602\\\"-34219\" ##  [7] \"\\\"A69-1602\\\"-34220\" \"\\\"A69-1602\\\"-34221\" \"\\\"A69-1602\\\"-34222\" ## [10] \"\\\"A69-1602\\\"-34223\""},{"path":"/articles/acoustic_telemetry.html","id":"acoustic-network-projects","dir":"Articles","previous_headings":"","what":"Acoustic network projects","title":"Explore acoustic telemetry data","text":"detection Wels catfishes possible thanks one acoustic network projects, mentioned field acoustic_project_code. can retrieve via list function list_values(): get information acoustic networks, can use function get_acoustic_projects() can retrieve full list acoustic network projects correspondent list_* function:","code":"acoustic_project_codes <- detections_silurus %>%    list_values(acoustic_project_code) ## 2 unique acoustic_project_code values acoustic_project_codes ## [1] \"demer\"      \"zeeschelde\" acoustic_projects_silurus <- get_acoustic_projects(   acoustic_project_code = acoustic_project_codes ) acoustic_projects_silurus ## # A tibble: 2 √ó 11 ##   projec‚Ä¶¬π proje‚Ä¶¬≤ proje‚Ä¶¬≥ telem‚Ä¶‚Å¥ proje‚Ä¶‚Åµ start_date end_date   latit‚Ä¶‚Å∂ longi‚Ä¶‚Å∑ ##      <int> <chr>   <chr>   <chr>   <chr>   <date>     <date>       <dbl>   <dbl> ## 1        7 demer   acoust‚Ä¶ Acoust‚Ä¶ Demer   2014-04-10 2015-02-13      NA      NA ## 2        5 zeesch‚Ä¶ acoust‚Ä¶ Acoust‚Ä¶ Zeesch‚Ä¶ 2014-04-10 NA              NA      NA ## # ‚Ä¶ with 2 more variables: moratorium <chr>, imis_dataset_id <int>, and ## #   abbreviated variable names ¬π‚Äãproject_id, ¬≤‚Äãproject_code, ¬≥‚Äãproject_type, ## #   ‚Å¥‚Äãtelemetry_type, ‚Åµ‚Äãproject_name, ‚Å∂‚Äãlatitude, ‚Å∑‚Äãlongitude list_acoustic_project_codes() %>% head(10) ##  [1] \"2004_Gudena\"              \"2011_Loire\"               ##  [3] \"2011_Warnow\"              \"2013_Foyle\"               ##  [5] \"2013_Maas\"                \"2014_Frome\"               ##  [7] \"2014_Nene\"                \"2015_PhD_Gutmann_Roberts\" ##  [9] \"2016_Diaccia_Botrona\"     \"2017_Fremur\""},{"path":"/articles/acoustic_telemetry.html","id":"acoustic-deployments","dir":"Articles","previous_headings":"","what":"Acoustic deployments","title":"Explore acoustic telemetry data","text":"can retrieve deployment information related acoustic networks acoustic_project_codes using get_acoustic_deployments() function: deployments acoustic receivers involved detections_silurus: information can retrieved via get_acoustic_deployments() function argument deployment_id: Deployment duration: Number days deployment detected passage one individuals: Relative detection duration, .e.¬†number days least one detection divided deployment duration:","code":"deployments <-get_acoustic_deployments(   acoustic_project_code = acoustic_project_codes ) deployments ## # A tibble: 415 √ó 38 ##    deploym‚Ä¶¬π recei‚Ä¶¬≤ acous‚Ä¶¬≥ stati‚Ä¶‚Å¥ stati‚Ä¶‚Åµ stati‚Ä¶‚Å∂ deploy_date_time    deplo‚Ä¶‚Å∑ ##        <int> <chr>   <chr>   <chr>   <chr>   <chr>   <dttm>                <dbl> ##  1      1424 VR2W-1‚Ä¶ demer   de-1    fietse‚Ä¶ 1       2014-05-13 00:00:00    51.0 ##  2      1658 VR2W-1‚Ä¶ demer   de-2    Rommel‚Ä¶ 1       2014-05-14 00:00:00    51.0 ##  3      1478 VR2W-1‚Ä¶ demer   de-2    rommel‚Ä¶ 1       2014-08-07 00:00:00    51.0 ##  4      1661 VR2W-1‚Ä¶ demer   de-3    Messel‚Ä¶ 1       2014-05-13 00:00:00    51.0 ##  5      1381 VR2W-1‚Ä¶ demer   de-3    Messel‚Ä¶ NA      2014-08-07 00:00:00    51.0 ##  6      2869 VR2W-1‚Ä¶ demer   de-3    Messel‚Ä¶ NA      2014-09-21 00:00:00    51.0 ##  7      1662 VR2W-1‚Ä¶ demer   de-4    Testelt 1       2014-05-13 00:00:00    51.0 ##  8      1425 VR2W-1‚Ä¶ demer   de-5    SO_ZIC‚Ä¶ 1       2014-05-05 00:00:00    51.0 ##  9      1663 VR2W-1‚Ä¶ demer   de-6    SA_RIF‚Ä¶ 1       2014-05-05 00:00:00    51.0 ## 10      1378 VR2W-1‚Ä¶ demer   de-7    de-7    NA      2014-05-05 00:00:00    51.0 ## # ‚Ä¶ with 405 more rows, 30 more variables: deploy_longitude <dbl>, ## #   intended_latitude <dbl>, intended_longitude <dbl>, mooring_type <chr>, ## #   bottom_depth <chr>, riser_length <chr>, deploy_depth <chr>, ## #   battery_installation_date <dttm>, battery_estimated_end_date <dttm>, ## #   activation_date_time <dttm>, recover_date_time <dttm>, ## #   recover_latitude <dbl>, recover_longitude <dbl>, download_date_time <dttm>, ## #   download_file_name <chr>, valid_data_until_date_time <dttm>, ‚Ä¶ deploys_silurus <-    detections_silurus %>%   list_values(deployment_id) ## 33 unique deployment_id values deploys_silurus ##  [1] 1427 1437 1378 1428 2938 1433 1431 1425 1429 1432 1379 1439 1436 1440 1381 ## [16] 2869 1478 1663 1662 1424 1656 1659 1660 1441 2933 1434 1384 1506 1592 1470 ## [31] 1588 1573 1593 deployments_silurus <- get_acoustic_deployments(   deployment_id = deploys_silurus ) deployments_silurus ## # A tibble: 33 √ó 38 ##    deploym‚Ä¶¬π recei‚Ä¶¬≤ acous‚Ä¶¬≥ stati‚Ä¶‚Å¥ stati‚Ä¶‚Åµ stati‚Ä¶‚Å∂ deploy_date_time    deplo‚Ä¶‚Å∑ ##        <int> <chr>   <chr>   <chr>   <chr>   <chr>   <dttm>                <dbl> ##  1      1424 VR2W-1‚Ä¶ demer   de-1    fietse‚Ä¶ 1       2014-05-13 00:00:00    51.0 ##  2      1478 VR2W-1‚Ä¶ demer   de-2    rommel‚Ä¶ 1       2014-08-07 00:00:00    51.0 ##  3      1381 VR2W-1‚Ä¶ demer   de-3    Messel‚Ä¶ NA      2014-08-07 00:00:00    51.0 ##  4      2869 VR2W-1‚Ä¶ demer   de-3    Messel‚Ä¶ NA      2014-09-21 00:00:00    51.0 ##  5      1662 VR2W-1‚Ä¶ demer   de-4    Testelt 1       2014-05-13 00:00:00    51.0 ##  6      1425 VR2W-1‚Ä¶ demer   de-5    SO_ZIC‚Ä¶ 1       2014-05-05 00:00:00    51.0 ##  7      1663 VR2W-1‚Ä¶ demer   de-6    SA_RIF‚Ä¶ 1       2014-05-05 00:00:00    51.0 ##  8      1378 VR2W-1‚Ä¶ demer   de-7    de-7    NA      2014-05-05 00:00:00    51.0 ##  9      1593 VR2W-1‚Ä¶ demer   de-7    de-7    NA      2014-12-19 02:00:00    51.0 ## 10      1427 VR2W-1‚Ä¶ demer   de-8    AAN_GB‚Ä¶ 1       2014-05-05 00:00:00    51.0 ## # ‚Ä¶ with 23 more rows, 30 more variables: deploy_longitude <dbl>, ## #   intended_latitude <dbl>, intended_longitude <dbl>, mooring_type <chr>, ## #   bottom_depth <chr>, riser_length <chr>, deploy_depth <chr>, ## #   battery_installation_date <dttm>, battery_estimated_end_date <dttm>, ## #   activation_date_time <dttm>, recover_date_time <dttm>, ## #   recover_latitude <dbl>, recover_longitude <dbl>, download_date_time <dttm>, ## #   download_file_name <chr>, valid_data_until_date_time <dttm>, ‚Ä¶ deployments_silurus_duration <-    deployments_silurus %>%    mutate(duration = as.duration(recover_date_time - deploy_date_time)) %>%   select(deployment_id, station_name, duration) %>%   arrange(deployment_id) deployments_silurus_duration ## # A tibble: 33 √ó 3 ##    deployment_id station_name duration                 ##            <int> <chr>        <Duration>               ##  1          1378 de-7         19706400s (~32.58 weeks) ##  2          1379 s-2a         19440000s (~32.14 weeks) ##  3          1381 de-3         3888000s (~6.43 weeks)   ##  4          1384 de-21        5788800s (~9.57 weeks)   ##  5          1424 de-1         23760000s (~39.29 weeks) ##  6          1425 de-5         24451200s (~40.43 weeks) ##  7          1427 de-8         19706400s (~32.58 weeks) ##  8          1428 de-10        26611200s (~44 weeks)    ##  9          1429 de-11        26611200s (~44 weeks)    ## 10          1431 de-14a       16070400s (~26.57 weeks) ## # ‚Ä¶ with 23 more rows n_active_days_deployments_silurus <-    detections_silurus %>%   mutate(date = date(date_time)) %>%   distinct(deployment_id, station_name, date) %>%   group_by(deployment_id, station_name) %>%   summarize(n_days = n(), .groups = \"drop\") %>%   ungroup() n_active_days_deployments_silurus ## # A tibble: 33 √ó 3 ##    deployment_id station_name n_days ##            <int> <chr>         <int> ##  1          1378 de-7            125 ##  2          1379 s-2a              7 ##  3          1381 de-3              5 ##  4          1384 de-21            25 ##  5          1424 de-1              7 ##  6          1425 de-5             48 ##  7          1427 de-8            142 ##  8          1428 de-10            35 ##  9          1429 de-11            15 ## 10          1431 de-14a           59 ## # ‚Ä¶ with 23 more rows rel_det_duration_silurus <-    n_active_days_deployments_silurus %>%   left_join(     deployments_silurus_duration,     by = c(\"deployment_id\", \"station_name\")   ) %>%   mutate(relative_detection_duration = n_days*(24*60*60) / as.numeric(duration)) %>%   select(deployment_id, station_name, relative_detection_duration) rel_det_duration_silurus ## # A tibble: 33 √ó 3 ##    deployment_id station_name relative_detection_duration ##            <int> <chr>                              <dbl> ##  1          1378 de-7                              0.548  ##  2          1379 s-2a                              0.0311 ##  3          1381 de-3                              0.111  ##  4          1384 de-21                             0.373  ##  5          1424 de-1                              0.0255 ##  6          1425 de-5                              0.170  ##  7          1427 de-8                              0.623  ##  8          1428 de-10                             0.114  ##  9          1429 de-11                             0.0487 ## 10          1431 de-14a                            0.317  ## # ‚Ä¶ with 23 more rows"},{"path":"/articles/acoustic_telemetry.html","id":"data-visualization","dir":"Articles","previous_headings":"","what":"Data visualization","title":"Explore acoustic telemetry data","text":"Aside standard graphs, geographical component telemetry data makes interactive maps particularly useful. package leaflet quite popular create kind visualizations. can example create map involved stations showing station name acoustic project code belongs pop-ups. First, retrieve coordinates stations: able produce desired map: can visualize number detections per station, n_detect_station, joining geo_info_stations: similar way can visualize number detected individuals per station, n_silurus_station: can also make map relative detection duration deployments. First, retrieve deployment geographical coordinates: ready create desired map, show deployment ID, station name network project popups: want add temporal component visualize fish movement? Take look moveVis package.","code":"geo_info_stations <-    detections_silurus %>%   distinct(     station_name,      deploy_latitude,      deploy_longitude,      acoustic_project_code   ) %>%   arrange(station_name) geo_info_stations ## # A tibble: 23 √ó 4 ##    acoustic_project_code station_name deploy_latitude deploy_longitude ##    <chr>                 <chr>                  <dbl>            <dbl> ##  1 demer                 de-1                    51.0             4.84 ##  2 demer                 de-10                   51.0             5.05 ##  3 demer                 de-11                   51.0             5.05 ##  4 demer                 de-12                   51.0             5.06 ##  5 demer                 de-13                   51.0             5.06 ##  6 demer                 de-14                   51.0             5.06 ##  7 demer                 de-14a                  51.0             5.06 ##  8 demer                 de-16                   51.0             5.06 ##  9 demer                 de-18                   51.0             5.07 ## 10 demer                 de-19                   51.0             5.08 ## # ‚Ä¶ with 13 more rows leaflet(geo_info_stations) %>%   addTiles() %>%   addMarkers(     lng = ~deploy_longitude,     lat = ~deploy_latitude,     popup = ~paste0(\"Station: \", station_name, \" (\", acoustic_project_code, \")\")   ) # Create a continuous colour palette function pal <- colorNumeric(   palette = \"viridis\",   domain = n_detect_station$n )  n_detect_station %>%   left_join(     geo_info_stations,     by = \"station_name\"   ) %>%   leaflet() %>%   addTiles() %>%   addCircleMarkers(     lng = ~deploy_longitude,     lat = ~deploy_latitude,     radius = ~log(n),     color = ~pal(n),     fillOpacity = 0.8,     stroke = FALSE,     popup = ~paste(       sep = \"<br/>\",       paste0(\"Station: \", station_name, \" (\", acoustic_project_code, \")\"),       paste0(\"# detections: \", n)     )   ) %>%    addLegend(     title = \"Detections\",     pal = pal,     values = ~n   ) # Create a continuous colour palette function pal <- colorNumeric(   palette = \"viridis\",   domain = n_silurus_station$n )  n_silurus_station %>%   left_join(     geo_info_stations,     by = \"station_name\"   ) %>%   leaflet() %>%   addTiles() %>%   addCircleMarkers(     lng = ~deploy_longitude,     lat = ~deploy_latitude,     radius = ~n,     color = ~pal(n),     fillOpacity = 0.8,     stroke = FALSE,     popup = ~paste(       sep = \"<br/>\",       paste0(\"Station: \", station_name, \" (\", acoustic_project_code, \")\"),       paste0(\"# detected individuals: \", n)     )   ) %>%    addLegend(     title = \"Detected individuals\",     pal = pal,     values = ~n   ) geo_info_deploys <-    detections_silurus %>%   distinct(     deployment_id,      deploy_latitude,      deploy_longitude,      station_name,     acoustic_project_code   ) %>%   arrange(station_name) geo_info_deploys ## # A tibble: 33 √ó 5 ##    acoustic_project_code station_name deploy_latitude deploy_longitude deploym‚Ä¶¬π ##    <chr>                 <chr>                  <dbl>            <dbl>     <int> ##  1 demer                 de-1                    51.0             4.84      1424 ##  2 demer                 de-10                   51.0             5.05      1428 ##  3 demer                 de-11                   51.0             5.05      1429 ##  4 demer                 de-12                   51.0             5.06      2938 ##  5 demer                 de-12                   51.0             5.06      1656 ##  6 demer                 de-12                   51.0             5.06      1470 ##  7 demer                 de-13                   51.0             5.06      1432 ##  8 demer                 de-14                   51.0             5.06      1433 ##  9 demer                 de-14                   51.0             5.06      1592 ## 10 demer                 de-14a                  51.0             5.06      1431 ## # ‚Ä¶ with 23 more rows, and abbreviated variable name ¬π‚Äãdeployment_id # Create a continuous colour palette function pal <- colorNumeric(   palette = \"viridis\",   domain = rel_det_duration_silurus$relative_detection_duration )  rel_det_duration_silurus %>%   left_join(     geo_info_deploys,     by = c(\"deployment_id\", \"station_name\")   ) %>%   leaflet() %>%   addTiles() %>%   addCircleMarkers(     lng = ~deploy_longitude,     lat = ~deploy_latitude,     radius = ~100*relative_detection_duration,     color = ~pal(relative_detection_duration),     fillOpacity = 0.8,     stroke = FALSE,     clusterOptions = markerClusterOptions(),     popup = ~paste(       sep = \"<br/>\",       paste0(\"DeploymentID: \", deployment_id),       paste0(\"Station: \", station_name, \" (\", acoustic_project_code, \")\"),       paste0(\"# relative detection duration: \", round(relative_detection_duration, 2))     )   ) %>%    addLegend(     title = \"Relative detection duration\",     pal = pal,     values = ~relative_detection_duration   )"},{"path":"/articles/etn_fields.html","id":"animals","dir":"Articles","previous_headings":"","what":"Animals","title":"ETN field definitions","text":"Related function: get_animals().","code":""},{"path":"/articles/etn_fields.html","id":"tags","dir":"Articles","previous_headings":"","what":"Tags","title":"ETN field definitions","text":"Related function: get_tags().","code":""},{"path":"/articles/etn_fields.html","id":"detections","dir":"Articles","previous_headings":"","what":"Detections","title":"ETN field definitions","text":"Related function: get_detections().","code":""},{"path":"/articles/etn_fields.html","id":"deployments","dir":"Articles","previous_headings":"","what":"Deployments","title":"ETN field definitions","text":"Related function: get_deployments().","code":""},{"path":"/articles/etn_fields.html","id":"receivers","dir":"Articles","previous_headings":"","what":"Receivers","title":"ETN field definitions","text":"Related function: get_receivers().","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Desmet. Author, maintainer. Damiano Oldoni. Author. Stijn Van Hoey. Author. Research Institute Nature Forest (INBO). Copyright holder.            https://www.vlaanderen./inbo/en-gb/ . Funder.            https://lifewatch.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Desmet P, Oldoni D, Van Hoey S (2022). etn: Access Data European Tracking Network. https://github.com/inbo/etn, https://inbo.github.io/etn.","code":"@Manual{,   title = {etn: Access Data from the European Tracking Network},   author = {Peter Desmet and Damiano Oldoni and Stijn {Van Hoey}},   year = {2022},   note = {https://github.com/inbo/etn, https://inbo.github.io/etn}, }"},{"path":"/index.html","id":"etn","dir":"","previous_headings":"","what":"Access Data from the European Tracking Network","title":"Access Data from the European Tracking Network","text":"Etn provides functionality access data European Tracking Network (ETN) database hosted Flanders Marine Institute (VLIZ) part Flemish contribution LifeWatch. ETN data subject ETN data policy can : restricted: moratorium accessible logged-data owners/collaborators unrestricted: publicly accessible without login routinely published international biodiversity facilities ETN infrastructure currently requires package run within LifeWatch.RStudio server, password protected. login can requested http://www.lifewatch./etn/contact.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access Data from the European Tracking Network","text":"can install development version etn GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"inbo/etn\")"},{"path":"/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Access Data from the European Tracking Network","text":"welcome contributions including bug reports. License: MIT Get citation information etn R citation(\"etn\"). Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"/reference/connect_to_etn.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to the ETN database ‚Äî connect_to_etn","title":"Connect to the ETN database ‚Äî connect_to_etn","text":"Connect ETN database using username password.","code":""},{"path":"/reference/connect_to_etn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to the ETN database ‚Äî connect_to_etn","text":"","code":"connect_to_etn(username = Sys.getenv(\"userid\"), password = Sys.getenv(\"pwd\"))"},{"path":"/reference/connect_to_etn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to the ETN database ‚Äî connect_to_etn","text":"username Character. Username use connection. password Character. Password use connection.","code":""},{"path":"/reference/connect_to_etn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to the ETN database ‚Äî connect_to_etn","text":"ODBC connection ETN database.","code":""},{"path":"/reference/connect_to_etn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to the ETN database ‚Äî connect_to_etn","text":"","code":"if (FALSE) { # Connect to the ETN database using your rstudio.lifewatch.be username and # password, and save as the default connection variable \"con\" con <- connect_to_etn()  # Connect to the ETN database using non-default username and password con <- connect_to_etn(username = \"my_username\", password = \"my_password\") }"},{"path":"/reference/download_acoustic_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Download acoustic data package ‚Äî download_acoustic_dataset","title":"Download acoustic data package ‚Äî download_acoustic_dataset","text":"Download acoustic data related animal project data package can deposited research data repository. Includes option filter scientific names.","code":""},{"path":"/reference/download_acoustic_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download acoustic data package ‚Äî download_acoustic_dataset","text":"","code":"download_acoustic_dataset(   connection = con,   animal_project_code,   scientific_name = NULL,   directory = animal_project_code )"},{"path":"/reference/download_acoustic_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download acoustic data package ‚Äî download_acoustic_dataset","text":"connection connection ETN database. Defaults con. animal_project_code Character. Animal project want download data . Required. scientific_name Character (vector). One scientific names. Defaults (scientific names, include \"Sync tag\", etc.). directory Character. Relative path local download directory. Defaults creating directory named animal project code. Existing files name overwritten.","code":""},{"path":"/reference/download_acoustic_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download acoustic data package ‚Äî download_acoustic_dataset","text":"data downloaded Frictionless Data Package containing: function report number records per csv file, well included scientific names acoustic projects. Warnings raised : Animals multiple tags Tags associated multiple animals Deployments without acoustic project: deployments listed deployments.csv therefore raise foreign key validation error. Duplicate detections: detections duplicate detection_id. removed function detections.csv. Important: data downloaded database, .e. quality consistency checks performed function. therefore recommend verify data publication. consistency check can performed validation tools Frictionless Framework, e.g. frictionless validate datapackage.json command line using frictionless-py.","code":""},{"path":"/reference/download_acoustic_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download acoustic data package ‚Äî download_acoustic_dataset","text":"","code":"if (FALSE) { # Set default connection variable con <- connect_to_etn()  # Download data for the 2012_leopoldkanaal animal project (all scientific names) download_acoustic_dataset(animal_project_code = \"2012_leopoldkanaal\") #> Downloading data to directory `2012_leopoldkanaal`: #> * (1/6): downloading animals.csv #> * (2/6): downloading tags.csv #> * (3/6): downloading detections.csv #> * (4/6): downloading deployments.csv #> * (5/6): downloading receivers.csv #> * (6/6): adding datapackage.json as file metadata #> Summary statistics for dataset `2012_leopoldkanaal`: #> * number of animals:           104 #> * number of tags:              103 #> * number of detections:        2215243 #> * number of deployments:       1968 #> * number of receivers:         454 #> * first date of detection:     2012-07-04 #> * last date of detection:      2021-09-02 #> * included scientific names:   Anguilla anguilla #> * included acoustic projects:  albert, Apelafico, bpns, JJ_Belwind, leopold, MOBEIA, pc4c, SPAWNSEIS, ws2, zeeschelde #> Warning message: #> In download_acoustic_dataset(animal_project_code = \"2012_leopoldkanaal\") : #> Found tags associated with multiple animals: 1145373 }"},{"path":"/reference/etn-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in etn ‚Äî etn-deprecated","title":"Deprecated functions in etn ‚Äî etn-deprecated","text":"functions listed deprecated renamed defunct near future.","code":""},{"path":"/reference/etn-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in etn ‚Äî etn-deprecated","text":"","code":"get_deployments(connection = con, network_project_code = NULL, ...)  get_detections(   connection = con,   tag_id = NULL,   network_project_code = NULL,   ... )  get_projects(connection = con, project_type, application_type)  get_receivers(...)  list_network_project_codes(...)  list_tag_ids(...)"},{"path":"/reference/etn-package.html","id":null,"dir":"Reference","previous_headings":"","what":"etn: Access Data from the European Tracking Network ‚Äî etn-package","title":"etn: Access Data from the European Tracking Network ‚Äî etn-package","text":"Package functions access process data European Tracking Network hosted VLIZ.","code":""},{"path":[]},{"path":"/reference/etn-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"etn: Access Data from the European Tracking Network ‚Äî etn-package","text":"Maintainer: Peter Desmet peter.desmet@inbo.(ORCID) Authors: Damiano Oldoni damiano.oldoni@inbo.(ORCID) Stijn Van Hoey stijnvanhoey@gmail.com (ORCID) contributors: Research Institute Nature Forest (INBO) (https://www.vlaanderen./inbo/en-gb/) [copyright holder] LifeWatch Belgium (https://lifewatch.) [funder]","code":""},{"path":"/reference/get_acoustic_deployments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get acoustic deployment data ‚Äî get_acoustic_deployments","title":"Get acoustic deployment data ‚Äî get_acoustic_deployments","text":"Get data deployments acoustic receivers, options filter results.","code":""},{"path":"/reference/get_acoustic_deployments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get acoustic deployment data ‚Äî get_acoustic_deployments","text":"","code":"get_acoustic_deployments(   connection = con,   deployment_id = NULL,   receiver_id = NULL,   acoustic_project_code = NULL,   station_name = NULL,   open_only = FALSE )"},{"path":"/reference/get_acoustic_deployments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get acoustic deployment data ‚Äî get_acoustic_deployments","text":"connection connection ETN database. Defaults con. deployment_id Integer (vector). One deployment identifiers. receiver_id Character (vector). One receiver identifiers. acoustic_project_code Character (vector). One acoustic project codes. Case-insensitive. station_name Character (vector). One deployment station names. open_only Logical. Restrict deployments currently open (.e. end date defined). Defaults FALSE.","code":""},{"path":"/reference/get_acoustic_deployments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get acoustic deployment data ‚Äî get_acoustic_deployments","text":"tibble acoustic deployment data, sorted acoustic_project_code, station_name deploy_date_time. See also field definitions.","code":""},{"path":"/reference/get_acoustic_deployments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get acoustic deployment data ‚Äî get_acoustic_deployments","text":"","code":"# Set default connection variable con <- connect_to_etn()  # Get all acoustic deployments get_acoustic_deployments(con) #> # A tibble: 11,709 √ó 38 #>    deploym‚Ä¶¬π recei‚Ä¶¬≤ acous‚Ä¶¬≥ stati‚Ä¶‚Å¥ stati‚Ä¶‚Åµ stati‚Ä¶‚Å∂ deploy_date_time    deplo‚Ä¶‚Å∑ #>        <int> <chr>   <chr>   <chr>   <chr>   <chr>   <dttm>                <dbl> #>  1      6660 VR20-2‚Ä¶ 2004_G‚Ä¶ GUD1    GUD1    NA      2004-03-03 00:00:00    56.4 #>  2      6670 VR2-35‚Ä¶ 2004_G‚Ä¶ GUD1    GUD1    NA      2005-02-25 00:00:00    56.4 #>  3      6661 VR2-19‚Ä¶ 2004_G‚Ä¶ GUD2    GUD2    NA      2004-03-03 00:00:00    56.4 #>  4      6671 VR2-19‚Ä¶ 2004_G‚Ä¶ GUD2    GUD2    NA      2005-02-25 00:00:00    56.4 #>  5      6680 VR2-25‚Ä¶ 2004_G‚Ä¶ KATNORD KATNORD NA      2005-02-25 00:00:00    56.6 #>  6      6679 VR2-27‚Ä¶ 2004_G‚Ä¶ KATSYD  KATSYD  NA      2005-02-25 00:00:00    56.6 #>  7      6662 VR2-35‚Ä¶ 2004_G‚Ä¶ RAN1    RAN1    NA      2004-03-03 00:00:00    56.5 #>  8      6672 VR2-35‚Ä¶ 2004_G‚Ä¶ RAN1    RAN1    NA      2005-02-25 00:00:00    56.5 #>  9      6663 VR2-19‚Ä¶ 2004_G‚Ä¶ RAN2    RAN2    NA      2004-03-03 00:00:00    56.5 #> 10      6673 VR2-19‚Ä¶ 2004_G‚Ä¶ RAN2    RAN2    NA      2005-02-25 00:00:00    56.5 #> # ‚Ä¶ with 11,699 more rows, 30 more variables: deploy_longitude <dbl>, #> #   intended_latitude <dbl>, intended_longitude <dbl>, mooring_type <chr>, #> #   bottom_depth <chr>, riser_length <chr>, deploy_depth <chr>, #> #   battery_installation_date <dttm>, battery_estimated_end_date <dttm>, #> #   activation_date_time <dttm>, recover_date_time <dttm>, #> #   recover_latitude <dbl>, recover_longitude <dbl>, download_date_time <dttm>, #> #   download_file_name <chr>, valid_data_until_date_time <dttm>, ‚Ä¶  # Get specific acoustic deployment get_acoustic_deployments(con, deployment_id = 1437) #> # A tibble: 1 √ó 38 #>   deployme‚Ä¶¬π recei‚Ä¶¬≤ acous‚Ä¶¬≥ stati‚Ä¶‚Å¥ stati‚Ä¶‚Åµ stati‚Ä¶‚Å∂ deploy_date_time    deplo‚Ä¶‚Å∑ #>        <int> <chr>   <chr>   <chr>   <chr>   <chr>   <dttm>                <dbl> #> 1       1437 VR2W-1‚Ä¶ demer   de-9    SA_GB_‚Ä¶ 1       2014-04-10 00:00:00    51.0 #> # ‚Ä¶ with 30 more variables: deploy_longitude <dbl>, intended_latitude <dbl>, #> #   intended_longitude <dbl>, mooring_type <chr>, bottom_depth <chr>, #> #   riser_length <chr>, deploy_depth <chr>, battery_installation_date <dttm>, #> #   battery_estimated_end_date <dttm>, activation_date_time <dttm>, #> #   recover_date_time <dttm>, recover_latitude <dbl>, recover_longitude <dbl>, #> #   download_date_time <dttm>, download_file_name <chr>, #> #   valid_data_until_date_time <dttm>, sync_date_time <dttm>, ‚Ä¶  # Get acoustic deployments for a specific receiver get_acoustic_deployments(con, receiver_id = \"VR2W-124070\") #> # A tibble: 8 √ó 38 #>   deployme‚Ä¶¬π recei‚Ä¶¬≤ acous‚Ä¶¬≥ stati‚Ä¶‚Å¥ stati‚Ä¶‚Åµ stati‚Ä¶‚Å∂ deploy_date_time    deplo‚Ä¶‚Å∑ #>        <int> <chr>   <chr>   <chr>   <chr>   <chr>   <dttm>                <dbl> #> 1       1437 VR2W-1‚Ä¶ demer   de-9    \"SA_GB‚Ä¶ \"1\"     2014-04-10 00:00:00    51.0 #> 2       1588 VR2W-1‚Ä¶ demer   de-9    \"de-9\"   NA     2014-12-19 01:30:00    51.0 #> 3       1803 VR2W-1‚Ä¶ dijle   M-2     \"M-2\"    NA     2015-04-16 00:00:00    51.0 #> 4       1804 VR2W-1‚Ä¶ dijle   M-2     \"\"      \"\"      2015-05-15 00:00:00    51.0 #> 5       1805 VR2W-1‚Ä¶ dijle   M-2     \"\"      \"\"      2015-05-28 00:00:00    51.0 #> 6       1806 VR2W-1‚Ä¶ dijle   M-2     \"\"      \"\"      2015-09-24 00:00:00    51.0 #> 7       1807 VR2W-1‚Ä¶ dijle   M-2     \"m-2\"    NA     2015-11-09 00:00:00    51.0 #> 8       2511 VR2W-1‚Ä¶ dijle   M-2     \"m-2\"    NA     2017-01-26 00:00:00    51.0 #> # ‚Ä¶ with 30 more variables: deploy_longitude <dbl>, intended_latitude <dbl>, #> #   intended_longitude <dbl>, mooring_type <chr>, bottom_depth <chr>, #> #   riser_length <chr>, deploy_depth <chr>, battery_installation_date <dttm>, #> #   battery_estimated_end_date <dttm>, activation_date_time <dttm>, #> #   recover_date_time <dttm>, recover_latitude <dbl>, recover_longitude <dbl>, #> #   download_date_time <dttm>, download_file_name <chr>, #> #   valid_data_until_date_time <dttm>, sync_date_time <dttm>, ‚Ä¶  # Get open acoustic deployments for a specific receiver get_acoustic_deployments(con, receiver_id = \"VR2W-124070\", open_only = TRUE) #> # A tibble: 0 √ó 38 #> # ‚Ä¶ with 38 variables: deployment_id <int>, receiver_id <chr>, #> #   acoustic_project_code <chr>, station_name <chr>, station_description <chr>, #> #   station_manager <chr>, deploy_date_time <dttm>, deploy_latitude <dbl>, #> #   deploy_longitude <dbl>, intended_latitude <dbl>, intended_longitude <dbl>, #> #   mooring_type <chr>, bottom_depth <chr>, riser_length <chr>, #> #   deploy_depth <chr>, battery_installation_date <dttm>, #> #   battery_estimated_end_date <dttm>, activation_date_time <dttm>, ‚Ä¶  # Get acoustic deployments for a specific acoustic project get_acoustic_deployments(con, acoustic_project_code = \"demer\") #> # A tibble: 46 √ó 38 #>    deploym‚Ä¶¬π recei‚Ä¶¬≤ acous‚Ä¶¬≥ stati‚Ä¶‚Å¥ stati‚Ä¶‚Åµ stati‚Ä¶‚Å∂ deploy_date_time    deplo‚Ä¶‚Å∑ #>        <int> <chr>   <chr>   <chr>   <chr>   <chr>   <dttm>                <dbl> #>  1      1424 VR2W-1‚Ä¶ demer   de-1    fietse‚Ä¶ 1       2014-05-13 00:00:00    51.0 #>  2      1658 VR2W-1‚Ä¶ demer   de-2    Rommel‚Ä¶ 1       2014-05-14 00:00:00    51.0 #>  3      1478 VR2W-1‚Ä¶ demer   de-2    rommel‚Ä¶ 1       2014-08-07 00:00:00    51.0 #>  4      1661 VR2W-1‚Ä¶ demer   de-3    Messel‚Ä¶ 1       2014-05-13 00:00:00    51.0 #>  5      1381 VR2W-1‚Ä¶ demer   de-3    Messel‚Ä¶ NA      2014-08-07 00:00:00    51.0 #>  6      2869 VR2W-1‚Ä¶ demer   de-3    Messel‚Ä¶ NA      2014-09-21 00:00:00    51.0 #>  7      1662 VR2W-1‚Ä¶ demer   de-4    Testelt 1       2014-05-13 00:00:00    51.0 #>  8      1425 VR2W-1‚Ä¶ demer   de-5    SO_ZIC‚Ä¶ 1       2014-05-05 00:00:00    51.0 #>  9      1663 VR2W-1‚Ä¶ demer   de-6    SA_RIF‚Ä¶ 1       2014-05-05 00:00:00    51.0 #> 10      1378 VR2W-1‚Ä¶ demer   de-7    de-7    NA      2014-05-05 00:00:00    51.0 #> # ‚Ä¶ with 36 more rows, 30 more variables: deploy_longitude <dbl>, #> #   intended_latitude <dbl>, intended_longitude <dbl>, mooring_type <chr>, #> #   bottom_depth <chr>, riser_length <chr>, deploy_depth <chr>, #> #   battery_installation_date <dttm>, battery_estimated_end_date <dttm>, #> #   activation_date_time <dttm>, recover_date_time <dttm>, #> #   recover_latitude <dbl>, recover_longitude <dbl>, download_date_time <dttm>, #> #   download_file_name <chr>, valid_data_until_date_time <dttm>, ‚Ä¶  # Get acoustic deployments for two specific stations get_acoustic_deployments(con, station_name = c(\"de-9\", \"de-10\")) #> # A tibble: 3 √ó 38 #>   deployme‚Ä¶¬π recei‚Ä¶¬≤ acous‚Ä¶¬≥ stati‚Ä¶‚Å¥ stati‚Ä¶‚Åµ stati‚Ä¶‚Å∂ deploy_date_time    deplo‚Ä¶‚Å∑ #>        <int> <chr>   <chr>   <chr>   <chr>   <chr>   <dttm>                <dbl> #> 1       1437 VR2W-1‚Ä¶ demer   de-9    SA_GB_‚Ä¶ 1       2014-04-10 00:00:00    51.0 #> 2       1588 VR2W-1‚Ä¶ demer   de-9    de-9    NA      2014-12-19 01:30:00    51.0 #> 3       1428 VR2W-1‚Ä¶ demer   de-10   IN_MZ_‚Ä¶ 2       2014-04-10 00:00:00    51.0 #> # ‚Ä¶ with 30 more variables: deploy_longitude <dbl>, intended_latitude <dbl>, #> #   intended_longitude <dbl>, mooring_type <chr>, bottom_depth <chr>, #> #   riser_length <chr>, deploy_depth <chr>, battery_installation_date <dttm>, #> #   battery_estimated_end_date <dttm>, activation_date_time <dttm>, #> #   recover_date_time <dttm>, recover_latitude <dbl>, recover_longitude <dbl>, #> #   download_date_time <dttm>, download_file_name <chr>, #> #   valid_data_until_date_time <dttm>, sync_date_time <dttm>, ‚Ä¶"},{"path":"/reference/get_acoustic_detections.html","id":null,"dir":"Reference","previous_headings":"","what":"Get acoustic detections data ‚Äî get_acoustic_detections","title":"Get acoustic detections data ‚Äî get_acoustic_detections","text":"Get data acoustic detections, options filter results. Use limit limit number returned records.","code":""},{"path":"/reference/get_acoustic_detections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get acoustic detections data ‚Äî get_acoustic_detections","text":"","code":"get_acoustic_detections(   connection = con,   start_date = NULL,   end_date = NULL,   acoustic_tag_id = NULL,   animal_project_code = NULL,   scientific_name = NULL,   acoustic_project_code = NULL,   receiver_id = NULL,   station_name = NULL,   limit = FALSE )"},{"path":"/reference/get_acoustic_detections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get acoustic detections data ‚Äî get_acoustic_detections","text":"connection connection ETN database. Defaults con. start_date Character. Start date (inclusive) ISO 8601 format ( yyyy-mm-dd, yyyy-mm yyyy). end_date Character. End date (exclusive) ISO 8601 format ( yyyy-mm-dd, yyyy-mm yyyy). acoustic_tag_id Character (vector). One acoustic tag ids. animal_project_code Character (vector). One animal project codes. Case-insensitive. scientific_name Character (vector). One scientific names. acoustic_project_code Character (vector). One acoustic project codes. Case-insensitive. receiver_id Character (vector). One receiver identifiers. station_name Character (vector). One deployment station names. limit Logical. Limit number returned records 100 (useful testing purposes). Defaults FALSE.","code":""},{"path":"/reference/get_acoustic_detections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get acoustic detections data ‚Äî get_acoustic_detections","text":"tibble acoustic detections data, sorted acoustic_tag_id date_time. See also field definitions.","code":""},{"path":"/reference/get_acoustic_detections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get acoustic detections data ‚Äî get_acoustic_detections","text":"","code":"# Set default connection variable con <- connect_to_etn()  # Get limited sample of acoustic detections get_acoustic_detections(con, limit = TRUE) #> # A tibble: 100 √ó 20 #>    detecti‚Ä¶¬π date_time           tag_s‚Ä¶¬≤ acous‚Ä¶¬≥ anima‚Ä¶‚Å¥ anima‚Ä¶‚Åµ scien‚Ä¶‚Å∂ acous‚Ä¶‚Å∑ #>        <int> <dttm>              <chr>   <chr>   <chr>     <int> <chr>   <chr>   #>  1  24296745 2015-03-22 17:08:17 1172834 A69-16‚Ä¶ 2015_h‚Ä¶     251 Homaru‚Ä¶ bpns    #>  2  24296749 2015-03-22 17:13:46 1172834 A69-16‚Ä¶ 2015_h‚Ä¶     251 Homaru‚Ä¶ bpns    #>  3  24296751 2015-03-22 17:15:46 1172834 A69-16‚Ä¶ 2015_h‚Ä¶     251 Homaru‚Ä¶ bpns    #>  4  24296756 2015-03-22 17:21:32 1172834 A69-16‚Ä¶ 2015_h‚Ä¶     251 Homaru‚Ä¶ bpns    #>  5  24296758 2015-03-22 17:24:10 1172834 A69-16‚Ä¶ 2015_h‚Ä¶     251 Homaru‚Ä¶ bpns    #>  6  24296762 2015-03-22 17:26:22 1172834 A69-16‚Ä¶ 2015_h‚Ä¶     251 Homaru‚Ä¶ bpns    #>  7  24296765 2015-03-22 17:27:44 1172834 A69-16‚Ä¶ 2015_h‚Ä¶     251 Homaru‚Ä¶ bpns    #>  8  24296767 2015-03-22 17:29:24 1172834 A69-16‚Ä¶ 2015_h‚Ä¶     251 Homaru‚Ä¶ bpns    #>  9  24296770 2015-03-22 17:31:42 1172834 A69-16‚Ä¶ 2015_h‚Ä¶     251 Homaru‚Ä¶ bpns    #> 10  24296775 2015-03-22 17:38:16 1172834 A69-16‚Ä¶ 2015_h‚Ä¶     251 Homaru‚Ä¶ bpns    #> # ‚Ä¶ with 90 more rows, 12 more variables: receiver_id <chr>, #> #   station_name <chr>, deploy_latitude <dbl>, deploy_longitude <dbl>, #> #   sensor_value <dbl>, sensor_unit <chr>, sensor2_value <dbl>, #> #   sensor2_unit <chr>, signal_to_noise_ratio <int>, source_file <chr>, #> #   qc_flag <chr>, deployment_id <int>, and abbreviated variable names #> #   ¬π‚Äãdetection_id, ¬≤‚Äãtag_serial_number, ¬≥‚Äãacoustic_tag_id, ‚Å¥‚Äãanimal_project_code, #> #   ‚Åµ‚Äãanimal_id, ‚Å∂‚Äãscientific_name, ‚Å∑‚Äãacoustic_project_code  # Get all acoustic detections from a specific animal project get_acoustic_detections(con, animal_project_code = \"2014_demer\") #> # A tibble: 236,918 √ó 20 #>    detecti‚Ä¶¬π date_time           tag_s‚Ä¶¬≤ acous‚Ä¶¬≥ anima‚Ä¶‚Å¥ anima‚Ä¶‚Åµ scien‚Ä¶‚Å∂ acous‚Ä¶‚Å∑ #>        <int> <dttm>              <chr>   <chr>   <chr>     <int> <chr>   <chr>   #>  1  21676626 2014-04-18 15:45:00 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  2  22524167 2014-04-18 15:45:09 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  3  21919770 2014-04-18 15:47:00 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  4  21745679 2014-04-18 15:47:45 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  5  21823882 2014-04-18 15:49:00 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  6  21976905 2014-04-18 15:49:02 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  7  21425044 2014-04-18 15:50:00 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  8  20734006 2014-04-18 15:50:03 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  9  21095838 2014-04-18 15:51:00 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #> 10  20627256 2014-04-18 15:51:11 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #> # ‚Ä¶ with 236,908 more rows, 12 more variables: receiver_id <chr>, #> #   station_name <chr>, deploy_latitude <dbl>, deploy_longitude <dbl>, #> #   sensor_value <dbl>, sensor_unit <chr>, sensor2_value <dbl>, #> #   sensor2_unit <chr>, signal_to_noise_ratio <int>, source_file <chr>, #> #   qc_flag <chr>, deployment_id <int>, and abbreviated variable names #> #   ¬π‚Äãdetection_id, ¬≤‚Äãtag_serial_number, ¬≥‚Äãacoustic_tag_id, ‚Å¥‚Äãanimal_project_code, #> #   ‚Åµ‚Äãanimal_id, ‚Å∂‚Äãscientific_name, ‚Å∑‚Äãacoustic_project_code  # Get 2015 acoustic detections from that animal project get_acoustic_detections(   con,   animal_project_code = \"2014_demer\",   start_date = \"2015\",   end_date = \"2016\", ) #> # A tibble: 23,695 √ó 20 #>    detecti‚Ä¶¬π date_time           tag_s‚Ä¶¬≤ acous‚Ä¶¬≥ anima‚Ä¶‚Å¥ anima‚Ä¶‚Åµ scien‚Ä¶‚Å∂ acous‚Ä¶‚Å∑ #>        <int> <dttm>              <chr>   <chr>   <chr>     <int> <chr>   <chr>   #>  1  23629467 2015-05-06 04:11:52 1187468 A69-16‚Ä¶ 2014_d‚Ä¶     306 Petrom‚Ä¶ dijle   #>  2  23630262 2015-05-07 15:59:24 1187468 A69-16‚Ä¶ 2014_d‚Ä¶     306 Petrom‚Ä¶ dijle   #>  3  23630263 2015-05-07 16:45:38 1187468 A69-16‚Ä¶ 2014_d‚Ä¶     306 Petrom‚Ä¶ dijle   #>  4  23630265 2015-05-07 16:56:22 1187468 A69-16‚Ä¶ 2014_d‚Ä¶     306 Petrom‚Ä¶ dijle   #>  5  23630267 2015-05-07 17:00:18 1187468 A69-16‚Ä¶ 2014_d‚Ä¶     306 Petrom‚Ä¶ dijle   #>  6  23630274 2015-05-07 17:06:13 1187468 A69-16‚Ä¶ 2014_d‚Ä¶     306 Petrom‚Ä¶ dijle   #>  7  23630278 2015-05-07 17:08:54 1187468 A69-16‚Ä¶ 2014_d‚Ä¶     306 Petrom‚Ä¶ dijle   #>  8  23630285 2015-05-07 17:15:07 1187468 A69-16‚Ä¶ 2014_d‚Ä¶     306 Petrom‚Ä¶ dijle   #>  9  23630294 2015-05-07 17:23:21 1187468 A69-16‚Ä¶ 2014_d‚Ä¶     306 Petrom‚Ä¶ dijle   #> 10  23630300 2015-05-07 17:27:27 1187468 A69-16‚Ä¶ 2014_d‚Ä¶     306 Petrom‚Ä¶ dijle   #> # ‚Ä¶ with 23,685 more rows, 12 more variables: receiver_id <chr>, #> #   station_name <chr>, deploy_latitude <dbl>, deploy_longitude <dbl>, #> #   sensor_value <dbl>, sensor_unit <chr>, sensor2_value <dbl>, #> #   sensor2_unit <chr>, signal_to_noise_ratio <int>, source_file <chr>, #> #   qc_flag <chr>, deployment_id <int>, and abbreviated variable names #> #   ¬π‚Äãdetection_id, ¬≤‚Äãtag_serial_number, ¬≥‚Äãacoustic_tag_id, ‚Å¥‚Äãanimal_project_code, #> #   ‚Åµ‚Äãanimal_id, ‚Å∂‚Äãscientific_name, ‚Å∑‚Äãacoustic_project_code  # Get April 2015 acoustic detections from that animal project get_acoustic_detections(   con,   animal_project_code = \"2014_demer\",   start_date = \"2015-04\",   end_date = \"2015-05\", ) #> # A tibble: 442 √ó 20 #>    detecti‚Ä¶¬π date_time           tag_s‚Ä¶¬≤ acous‚Ä¶¬≥ anima‚Ä¶‚Å¥ anima‚Ä¶‚Åµ scien‚Ä¶‚Å∂ acous‚Ä¶‚Å∑ #>        <int> <dttm>              <chr>   <chr>   <chr>     <int> <chr>   <chr>   #>  1  23184110 2015-04-03 15:40:26 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #>  2  23184111 2015-04-04 15:46:28 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #>  3  23184112 2015-04-04 15:57:00 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #>  4  23184113 2015-04-04 16:01:08 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #>  5  23184114 2015-04-04 16:26:53 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #>  6  23184115 2015-04-04 16:35:18 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #>  7  23184116 2015-04-04 16:47:53 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #>  8  23184117 2015-04-04 17:10:07 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #>  9  23184118 2015-04-04 17:13:54 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #> 10  23184119 2015-04-04 17:24:01 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #> # ‚Ä¶ with 432 more rows, 12 more variables: receiver_id <chr>, #> #   station_name <chr>, deploy_latitude <dbl>, deploy_longitude <dbl>, #> #   sensor_value <dbl>, sensor_unit <chr>, sensor2_value <dbl>, #> #   sensor2_unit <chr>, signal_to_noise_ratio <int>, source_file <chr>, #> #   qc_flag <chr>, deployment_id <int>, and abbreviated variable names #> #   ¬π‚Äãdetection_id, ¬≤‚Äãtag_serial_number, ¬≥‚Äãacoustic_tag_id, ‚Å¥‚Äãanimal_project_code, #> #   ‚Åµ‚Äãanimal_id, ‚Å∂‚Äãscientific_name, ‚Å∑‚Äãacoustic_project_code  # Get April 24, 2015 acoustic detections from that animal project get_acoustic_detections(   con,   animal_project_code = \"2014_demer\",   start_date = \"2015-04-24\",   end_date = \"2015-04-25\", ) #> # A tibble: 2 √ó 20 #>   detectio‚Ä¶¬π date_time           tag_s‚Ä¶¬≤ acous‚Ä¶¬≥ anima‚Ä¶‚Å¥ anima‚Ä¶‚Åµ scien‚Ä¶‚Å∂ acous‚Ä¶‚Å∑ #>        <int> <dttm>              <chr>   <chr>   <chr>     <int> <chr>   <chr>   #> 1   23053006 2015-04-24 07:54:12 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #> 2   23053007 2015-04-24 07:56:29 1171781 A69-16‚Ä¶ 2014_d‚Ä¶     369 Siluru‚Ä¶ zeesch‚Ä¶ #> # ‚Ä¶ with 12 more variables: receiver_id <chr>, station_name <chr>, #> #   deploy_latitude <dbl>, deploy_longitude <dbl>, sensor_value <dbl>, #> #   sensor_unit <chr>, sensor2_value <dbl>, sensor2_unit <chr>, #> #   signal_to_noise_ratio <int>, source_file <chr>, qc_flag <chr>, #> #   deployment_id <int>, and abbreviated variable names ¬π‚Äãdetection_id, #> #   ¬≤‚Äãtag_serial_number, ¬≥‚Äãacoustic_tag_id, ‚Å¥‚Äãanimal_project_code, ‚Åµ‚Äãanimal_id, #> #   ‚Å∂‚Äãscientific_name, ‚Å∑‚Äãacoustic_project_code  # Get acoustic detections for a specific tag at two specific stations get_acoustic_detections(   con,   acoustic_tag_id = \"A69-1601-16130\",   station_name = c(\"de-9\", \"de-10\") ) #> # A tibble: 48 √ó 20 #>    detecti‚Ä¶¬π date_time           tag_s‚Ä¶¬≤ acous‚Ä¶¬≥ anima‚Ä¶‚Å¥ anima‚Ä¶‚Åµ scien‚Ä¶‚Å∂ acous‚Ä¶‚Å∑ #>        <int> <dttm>              <chr>   <chr>   <chr>     <int> <chr>   <chr>   #>  1  22308206 2014-04-24 16:12:00 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #>  2  21286383 2014-04-24 16:12:42 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #>  3  21634739 2014-04-24 16:15:00 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #>  4  21844100 2014-04-24 16:15:27 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #>  5  22670703 2014-04-24 16:16:00 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #>  6  21503030 2014-04-24 16:16:57 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #>  7  22094662 2014-04-26 10:22:00 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #>  8  21861085 2014-04-26 10:22:44 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #>  9  22362287 2014-04-26 10:23:00 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #> 10  20667884 2014-04-26 10:23:51 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #> # ‚Ä¶ with 38 more rows, 12 more variables: receiver_id <chr>, #> #   station_name <chr>, deploy_latitude <dbl>, deploy_longitude <dbl>, #> #   sensor_value <dbl>, sensor_unit <chr>, sensor2_value <dbl>, #> #   sensor2_unit <chr>, signal_to_noise_ratio <int>, source_file <chr>, #> #   qc_flag <chr>, deployment_id <int>, and abbreviated variable names #> #   ¬π‚Äãdetection_id, ¬≤‚Äãtag_serial_number, ¬≥‚Äãacoustic_tag_id, ‚Å¥‚Äãanimal_project_code, #> #   ‚Åµ‚Äãanimal_id, ‚Å∂‚Äãscientific_name, ‚Å∑‚Äãacoustic_project_code  # Get acoustic detections for a specific species, receiver and acoustic project get_acoustic_detections(   con,   scientific_name = \"Rutilus rutilus\",   receiver_id = \"VR2W-124070\",   acoustic_project_code = \"demer\" ) #> # A tibble: 38 √ó 20 #>    detecti‚Ä¶¬π date_time           tag_s‚Ä¶¬≤ acous‚Ä¶¬≥ anima‚Ä¶‚Å¥ anima‚Ä¶‚Åµ scien‚Ä¶‚Å∂ acous‚Ä¶‚Å∑ #>        <int> <dttm>              <chr>   <chr>   <chr>     <int> <chr>   <chr>   #>  1  22437907 2014-04-18 16:10:00 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  2  21250456 2014-04-18 16:10:52 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  3  21697884 2014-04-18 16:12:00 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  4  20962095 2014-04-18 16:12:26 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  5  22013363 2014-04-18 16:15:00 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  6  22153161 2014-04-18 16:15:32 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  7  21863649 2014-04-18 16:17:00 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  8  21261941 2014-04-18 16:17:05 1187449 A69-16‚Ä¶ 2014_d‚Ä¶     304 Rutilu‚Ä¶ demer   #>  9  22308206 2014-04-24 16:12:00 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #> 10  21286383 2014-04-24 16:12:42 1187450 A69-16‚Ä¶ 2014_d‚Ä¶     305 Rutilu‚Ä¶ demer   #> # ‚Ä¶ with 28 more rows, 12 more variables: receiver_id <chr>, #> #   station_name <chr>, deploy_latitude <dbl>, deploy_longitude <dbl>, #> #   sensor_value <dbl>, sensor_unit <chr>, sensor2_value <dbl>, #> #   sensor2_unit <chr>, signal_to_noise_ratio <int>, source_file <chr>, #> #   qc_flag <chr>, deployment_id <int>, and abbreviated variable names #> #   ¬π‚Äãdetection_id, ¬≤‚Äãtag_serial_number, ¬≥‚Äãacoustic_tag_id, ‚Å¥‚Äãanimal_project_code, #> #   ‚Åµ‚Äãanimal_id, ‚Å∂‚Äãscientific_name, ‚Å∑‚Äãacoustic_project_code"},{"path":"/reference/get_acoustic_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get acoustic project data ‚Äî get_acoustic_projects","title":"Get acoustic project data ‚Äî get_acoustic_projects","text":"Get data acoustic projects, options filter results.","code":""},{"path":"/reference/get_acoustic_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get acoustic project data ‚Äî get_acoustic_projects","text":"","code":"get_acoustic_projects(connection = con, acoustic_project_code = NULL)"},{"path":"/reference/get_acoustic_projects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get acoustic project data ‚Äî get_acoustic_projects","text":"connection connection ETN database. Defaults con. acoustic_project_code Character (vector). One acoustic project codes. Case-insensitive.","code":""},{"path":"/reference/get_acoustic_projects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get acoustic project data ‚Äî get_acoustic_projects","text":"tibble acoustic project data, sorted project_code. See also field definitions.","code":""},{"path":"/reference/get_acoustic_projects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get acoustic project data ‚Äî get_acoustic_projects","text":"","code":"# Set default connection variable con <- connect_to_etn()  # Get all acoustic projects get_acoustic_projects(con) #> # A tibble: 194 √ó 11 #>    proje‚Ä¶¬π proje‚Ä¶¬≤ proje‚Ä¶¬≥ telem‚Ä¶‚Å¥ proje‚Ä¶‚Åµ start_date end_date   latit‚Ä¶‚Å∂ longi‚Ä¶‚Å∑ #>      <int> <chr>   <chr>   <chr>   <chr>   <date>     <date>       <dbl>   <dbl> #>  1     794 2004_G‚Ä¶ acoust‚Ä¶ Acoust‚Ä¶ 2004_G‚Ä¶ 2004-01-01 2005-12-31    56.4   9.91  #>  2     761 2011_L‚Ä¶ acoust‚Ä¶ Acoust‚Ä¶ 2011_L‚Ä¶ 2011-11-11 2012-02-25    47.3  -1.98  #>  3     755 2011_W‚Ä¶ acoust‚Ä¶ Acoust‚Ä¶ 2011_W‚Ä¶ 2011-06-01 2012-10-12    54.1  12.1   #>  4     758 2013_F‚Ä¶ acoust‚Ä¶ Acoust‚Ä¶ 2013_F‚Ä¶ 2013-07-01 2014-03-01    54.9  -7.39  #>  5      13 2013_M‚Ä¶ acoust‚Ä¶ Acoust‚Ä¶ 2013_M‚Ä¶ 2013-01-01 2017-12-31    50.7   5.62  #>  6     802 2014_F‚Ä¶ acoust‚Ä¶ Acoust‚Ä¶ 2014_F‚Ä¶ 2014-10-01 2015-01-31    50.7  -2.11  #>  7     819 2014_N‚Ä¶ acoust‚Ä¶ Acoust‚Ä¶ 2014_N‚Ä¶ 2014-10-31 2015-02-01    52.5  -0.457 #>  8     815 2015_P‚Ä¶ acoust‚Ä¶ Acoust‚Ä¶ 2015_P‚Ä¶ 2015-09-22 2017-09-07    52.2  -2.24  #>  9     773 2016_D‚Ä¶ acoust‚Ä¶ PIT     2016_D‚Ä¶ 2016-01-01 NA            42.8  10.9   #> 10     763 2017_F‚Ä¶ acoust‚Ä¶ Acoust‚Ä¶ 2017_F‚Ä¶ 2017-09-10 2018-02-23    48.6  -2.08  #> # ‚Ä¶ with 184 more rows, 2 more variables: moratorium <chr>, #> #   imis_dataset_id <int>, and abbreviated variable names ¬π‚Äãproject_id, #> #   ¬≤‚Äãproject_code, ¬≥‚Äãproject_type, ‚Å¥‚Äãtelemetry_type, ‚Åµ‚Äãproject_name, ‚Å∂‚Äãlatitude, #> #   ‚Å∑‚Äãlongitude  # Get a specific acoustic project get_acoustic_projects(con, acoustic_project_code = \"demer\") #> # A tibble: 1 √ó 11 #>   projec‚Ä¶¬π proje‚Ä¶¬≤ proje‚Ä¶¬≥ telem‚Ä¶‚Å¥ proje‚Ä¶‚Åµ start_date end_date   latit‚Ä¶‚Å∂ longi‚Ä¶‚Å∑ #>      <int> <chr>   <chr>   <chr>   <chr>   <date>     <date>       <dbl>   <dbl> #> 1        7 demer   acoust‚Ä¶ Acoust‚Ä¶ Demer   2014-04-10 2015-02-13      NA      NA #> # ‚Ä¶ with 2 more variables: moratorium <chr>, imis_dataset_id <int>, and #> #   abbreviated variable names ¬π‚Äãproject_id, ¬≤‚Äãproject_code, ¬≥‚Äãproject_type, #> #   ‚Å¥‚Äãtelemetry_type, ‚Åµ‚Äãproject_name, ‚Å∂‚Äãlatitude, ‚Å∑‚Äãlongitude"},{"path":"/reference/get_acoustic_receivers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get acoustic receiver data ‚Äî get_acoustic_receivers","title":"Get acoustic receiver data ‚Äî get_acoustic_receivers","text":"Get data acoustic receivers, options filter results.","code":""},{"path":"/reference/get_acoustic_receivers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get acoustic receiver data ‚Äî get_acoustic_receivers","text":"","code":"get_acoustic_receivers(connection = con, receiver_id = NULL, status = NULL)"},{"path":"/reference/get_acoustic_receivers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get acoustic receiver data ‚Äî get_acoustic_receivers","text":"connection connection ETN database. Defaults con. receiver_id Character (vector). One receiver identifiers. status Character. One statuses, e.g. available broken.","code":""},{"path":"/reference/get_acoustic_receivers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get acoustic receiver data ‚Äî get_acoustic_receivers","text":"tibble acoustic receiver data, sorted receiver_id. See also field definitions. Values owner_organization visible member group.","code":""},{"path":"/reference/get_acoustic_receivers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get acoustic receiver data ‚Äî get_acoustic_receivers","text":"","code":"# Set default connection variable con <- connect_to_etn()  # Get all acoustic receivers get_acoustic_receivers(con) #> # A tibble: 4,849 √ó 23 #>    receiver_id    manuf‚Ä¶¬π recei‚Ä¶¬≤ recei‚Ä¶¬≥ modem‚Ä¶‚Å¥ status batte‚Ä¶‚Åµ owner‚Ä¶‚Å∂ finan‚Ä¶‚Å∑ #>    <chr>          <chr>   <chr>   <chr>   <chr>   <chr>  <chr>   <chr>   <chr>   #>  1 ADTT-LP-7-3-3  THELMA‚Ä¶ ADTT    LP-7-3‚Ä¶ NA      avail‚Ä¶ NA      OTN     V2LIMF‚Ä¶ #>  2 ADTT-LP-7-3-4  THELMA‚Ä¶ ADTT    LP-7-3‚Ä¶ NA      avail‚Ä¶ NA      OTN     V2LIMF‚Ä¶ #>  3 BULK-UPLOAD-D‚Ä¶ VEMCO   BULK    UPLOAD‚Ä¶ NA      avail‚Ä¶ NA      VLIZ    NA      #>  4 CURRENT METER‚Ä¶ AANDER‚Ä¶ CURREN‚Ä¶ Aander‚Ä¶ NA      NA     NA      OTN     SGB     #>  5 DST TILT-111   STAR-O‚Ä¶ DST TI‚Ä¶ 111     NA      NA     NA      OTN     SGB     #>  6 DST TILT-112   STAR-O‚Ä¶ DST TI‚Ä¶ 112     NA      NA     NA      OTN     SGB     #>  7 DST TILT-113   STAR-O‚Ä¶ DST TI‚Ä¶ 113     NA      NA     NA      OTN     SGB     #>  8 DST TILT-202   STAR-O‚Ä¶ DST TI‚Ä¶ 202     NA      NA     NA      OTN     SGB     #>  9 DST TILT-205   STAR-O‚Ä¶ DST TI‚Ä¶ 205     NA      NA     NA      OTN     SGB     #> 10 DST TILT-207   STAR-O‚Ä¶ DST TI‚Ä¶ 207     NA      NA     NA      OTN     SGB     #> # ‚Ä¶ with 4,839 more rows, 14 more variables: built_in_acoustic_tag_id <chr>, #> #   ar_model <chr>, ar_serial_number <chr>, ar_battery_estimated_life <chr>, #> #   ar_voltage_at_deploy <chr>, ar_interrogate_code <chr>, #> #   ar_receive_frequency <chr>, ar_reply_frequency <chr>, ar_ping_rate <chr>, #> #   ar_enable_code_address <chr>, ar_release_code <chr>, ar_disable_code <chr>, #> #   ar_tilt_code <chr>, ar_tilt_after_deploy <chr>, and abbreviated variable #> #   names ¬π‚Äãmanufacturer, ¬≤‚Äãreceiver_model, ¬≥‚Äãreceiver_serial_number, ‚Ä¶  # Get lost and broken acoustic receivers get_acoustic_receivers(con, status = c(\"lost\", \"broken\")) #> # A tibble: 161 √ó 23 #>    receiver_id    manuf‚Ä¶¬π recei‚Ä¶¬≤ recei‚Ä¶¬≥ modem‚Ä¶‚Å¥ status batte‚Ä¶‚Åµ owner‚Ä¶‚Å∂ finan‚Ä¶‚Å∑ #>    <chr>          <chr>   <chr>   <chr>   <chr>   <chr>  <chr>   <chr>   <chr>   #>  1 TBR700-001195  THELMA‚Ä¶ TBR700  001195  NA      lost   8       PROFISH Wallon‚Ä¶ #>  2 TBR700-001197  THELMA‚Ä¶ TBR700  001197  NA      lost   8       PROFISH Wallon‚Ä¶ #>  3 TBR700-001768  THELMA‚Ä¶ TBR700  001768  NA      broken 8       PROFISH Wallon‚Ä¶ #>  4 TBR700-TBR700‚Ä¶ THELMA‚Ä¶ TBR700  TBR700‚Ä¶ NA      broken 8       PROFISH Wallon‚Ä¶ #>  5 VR2AR-545719   VEMCO   VR2AR   545719  NA      lost   NA      VLIZ    NA      #>  6 VR2AR-546046   VEMCO   VR2AR   546046  NA      lost   NA      VLIZ    no_info #>  7 VR2AR-546049   VEMCO   VR2AR   546049  NA      lost   NA      VLIZ    NA      #>  8 VR2AR-546050   VEMCO   VR2AR   546050  NA      lost   NA      VLIZ    NA      #>  9 VR2AR-546894   VEMCO   VR2AR   546894  NA      lost   NA      VLIZ    NA      #> 10 VR2AR-547656   VEMCO   VR2AR   547656  NA      lost   NA      VLIZ    NA      #> # ‚Ä¶ with 151 more rows, 14 more variables: built_in_acoustic_tag_id <chr>, #> #   ar_model <chr>, ar_serial_number <chr>, ar_battery_estimated_life <chr>, #> #   ar_voltage_at_deploy <chr>, ar_interrogate_code <chr>, #> #   ar_receive_frequency <chr>, ar_reply_frequency <chr>, ar_ping_rate <chr>, #> #   ar_enable_code_address <chr>, ar_release_code <chr>, ar_disable_code <chr>, #> #   ar_tilt_code <chr>, ar_tilt_after_deploy <chr>, and abbreviated variable #> #   names ¬π‚Äãmanufacturer, ¬≤‚Äãreceiver_model, ¬≥‚Äãreceiver_serial_number, ‚Ä¶  # Get a specific acoustic receiver get_acoustic_receivers(con, receiver_id = \"VR2W-124070\") #> # A tibble: 1 √ó 23 #>   recei‚Ä¶¬π manuf‚Ä¶¬≤ recei‚Ä¶¬≥ recei‚Ä¶‚Å¥ modem‚Ä¶‚Åµ status batte‚Ä¶‚Å∂ owner‚Ä¶‚Å∑ finan‚Ä¶‚Å∏ built‚Ä¶‚Åπ #>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  <chr>   <chr>   <chr>   <chr>   #> 1 VR2W-1‚Ä¶ VEMCO   VR2W    124070  NA      avail‚Ä¶ NA      INBO    NA      NA      #> # ‚Ä¶ with 13 more variables: ar_model <chr>, ar_serial_number <chr>, #> #   ar_battery_estimated_life <chr>, ar_voltage_at_deploy <chr>, #> #   ar_interrogate_code <chr>, ar_receive_frequency <chr>, #> #   ar_reply_frequency <chr>, ar_ping_rate <chr>, ar_enable_code_address <chr>, #> #   ar_release_code <chr>, ar_disable_code <chr>, ar_tilt_code <chr>, #> #   ar_tilt_after_deploy <chr>, and abbreviated variable names ¬π‚Äãreceiver_id, #> #   ¬≤‚Äãmanufacturer, ¬≥‚Äãreceiver_model, ‚Å¥‚Äãreceiver_serial_number, ‚Åµ‚Äãmodem_address, ‚Ä¶"},{"path":"/reference/get_animal_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get animal project data ‚Äî get_animal_projects","title":"Get animal project data ‚Äî get_animal_projects","text":"Get data animal projects, options filter results.","code":""},{"path":"/reference/get_animal_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get animal project data ‚Äî get_animal_projects","text":"","code":"get_animal_projects(connection = con, animal_project_code = NULL)"},{"path":"/reference/get_animal_projects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get animal project data ‚Äî get_animal_projects","text":"connection connection ETN database. Defaults con. animal_project_code Character (vector). One animal project codes. Case-insensitive.","code":""},{"path":"/reference/get_animal_projects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get animal project data ‚Äî get_animal_projects","text":"tibble animal project data, sorted project_code. See also field definitions.","code":""},{"path":"/reference/get_animal_projects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get animal project data ‚Äî get_animal_projects","text":"","code":"# Set default connection variable con <- connect_to_etn()  # Get all animal projects get_animal_projects(con) #> # A tibble: 218 √ó 11 #>    proje‚Ä¶¬π proje‚Ä¶¬≤ proje‚Ä¶¬≥ telem‚Ä¶‚Å¥ proje‚Ä¶‚Åµ start_date end_date   latit‚Ä¶‚Å∂ longi‚Ä¶‚Å∑ #>      <int> <chr>   <chr>   <chr>   <chr>   <date>     <date>       <dbl>   <dbl> #>  1     793 2004_G‚Ä¶ animal  Acoust‚Ä¶ 2004_G‚Ä¶ 2004-01-01 2005-12-31    56.4    9.91 #>  2      16 2010_p‚Ä¶ animal  Acoust‚Ä¶ 2010_p‚Ä¶ 2010-08-01 2012-10-30    NA     NA    #>  3     841 2010_p‚Ä¶ animal  Acoust‚Ä¶ 2010_p‚Ä¶ 2010-08-01 2012-10-30    NA     NA    #>  4     760 2011_L‚Ä¶ animal  Acoust‚Ä¶ 2011_L‚Ä¶ 2011-11-11 2012-02-25    47.3   -1.98 #>  5     754 2011_W‚Ä¶ animal  Acoust‚Ä¶ 2011_W‚Ä¶ 2011-06-01 2012-10-12    54.1   12.1  #>  6      20 2011_r‚Ä¶ animal  Acoust‚Ä¶ 2011 R‚Ä¶ 2011-01-01 2012-09-03    NA     NA    #>  7      15 2012_l‚Ä¶ animal  Acoust‚Ä¶ 2012 L‚Ä¶ 2012-01-01 2016-01-18    NA     NA    #>  8     757 2013_F‚Ä¶ animal  Acoust‚Ä¶ 2013_F‚Ä¶ 2013-07-01 2014-03-01    54.9   -7.39 #>  9      18 2013_a‚Ä¶ animal  Acoust‚Ä¶ 2013 A‚Ä¶ 2013-10-10 2018-12-31    NA     NA    #> 10     801 2014_F‚Ä¶ animal  Acoust‚Ä¶ 2014_F‚Ä¶ 2014-10-01 2015-01-31    50.7   -2.11 #> # ‚Ä¶ with 208 more rows, 2 more variables: moratorium <chr>, #> #   imis_dataset_id <int>, and abbreviated variable names ¬π‚Äãproject_id, #> #   ¬≤‚Äãproject_code, ¬≥‚Äãproject_type, ‚Å¥‚Äãtelemetry_type, ‚Åµ‚Äãproject_name, ‚Å∂‚Äãlatitude, #> #   ‚Å∑‚Äãlongitude  # Get a specific animal project get_animal_projects(con, animal_project_code = \"2014_demer\") #> # A tibble: 1 √ó 11 #>   projec‚Ä¶¬π proje‚Ä¶¬≤ proje‚Ä¶¬≥ telem‚Ä¶‚Å¥ proje‚Ä¶‚Åµ start_date end_date   latit‚Ä¶‚Å∂ longi‚Ä¶‚Å∑ #>      <int> <chr>   <chr>   <chr>   <chr>   <date>     <date>       <dbl>   <dbl> #> 1       21 2014_d‚Ä¶ animal  Acoust‚Ä¶ 2014 D‚Ä¶ 2014-04-10 2015-02-13      NA      NA #> # ‚Ä¶ with 2 more variables: moratorium <chr>, imis_dataset_id <int>, and #> #   abbreviated variable names ¬π‚Äãproject_id, ¬≤‚Äãproject_code, ¬≥‚Äãproject_type, #> #   ‚Å¥‚Äãtelemetry_type, ‚Åµ‚Äãproject_name, ‚Å∂‚Äãlatitude, ‚Å∑‚Äãlongitude"},{"path":"/reference/get_animals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get animal data ‚Äî get_animals","title":"Get animal data ‚Äî get_animals","text":"Get data animals, options filter results. Associated tag information available columns starting tag acoustic_tag_id. multiple tags associated single animal, information comma-separated.","code":""},{"path":"/reference/get_animals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get animal data ‚Äî get_animals","text":"","code":"get_animals(   connection = con,   animal_id = NULL,   tag_serial_number = NULL,   animal_project_code = NULL,   scientific_name = NULL )"},{"path":"/reference/get_animals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get animal data ‚Äî get_animals","text":"connection connection ETN database. Defaults con. animal_id Integer (vector). One animal identifiers. tag_serial_number Character (vector). One tag serial numbers. animal_project_code Character (vector). One animal project codes. Case-insensitive. scientific_name Character (vector). One scientific names.","code":""},{"path":"/reference/get_animals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get animal data ‚Äî get_animals","text":"tibble animals data, sorted animal_project_code, release_date_time tag_serial_number. See also field definitions.","code":""},{"path":"/reference/get_animals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get animal data ‚Äî get_animals","text":"","code":"# Set default connection variable con <- connect_to_etn()  # Get all animals get_animals(con) #> # A tibble: 17,813 √ó 66 #>    animal_id animal_pr‚Ä¶¬π tag_s‚Ä¶¬≤ tag_t‚Ä¶¬≥ tag_s‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ scien‚Ä¶‚Å∑ commo‚Ä¶‚Å∏ #>        <int> <chr>       <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1      5923 2004_Gudena 1208    acoust‚Ä¶ animal  A69-10‚Ä¶ R256-1‚Ä¶ Anguil‚Ä¶ NA      #>  2      5924 2004_Gudena 1209    acoust‚Ä¶ animal  A69-10‚Ä¶ R256-1‚Ä¶ Anguil‚Ä¶ NA      #>  3      5915 2004_Gudena 7416    acoust‚Ä¶ animal  A69-10‚Ä¶ R256-74 Anguil‚Ä¶ NA      #>  4      5916 2004_Gudena 7417    acoust‚Ä¶ animal  A69-10‚Ä¶ R256-75 Anguil‚Ä¶ NA      #>  5      5917 2004_Gudena 7418    acoust‚Ä¶ animal  A69-10‚Ä¶ R256-76 Anguil‚Ä¶ NA      #>  6      5918 2004_Gudena 7419    acoust‚Ä¶ animal  A69-10‚Ä¶ R256-77 Anguil‚Ä¶ NA      #>  7      5919 2004_Gudena 7420    acoust‚Ä¶ animal  A69-10‚Ä¶ R256-78 Anguil‚Ä¶ NA      #>  8      5920 2004_Gudena 7421    acoust‚Ä¶ animal  A69-10‚Ä¶ R256-79 Anguil‚Ä¶ NA      #>  9      5921 2004_Gudena 7422    acoust‚Ä¶ animal  A69-10‚Ä¶ R256-80 Anguil‚Ä¶ NA      #> 10      5922 2004_Gudena 7423    acoust‚Ä¶ animal  A69-10‚Ä¶ R256-81 Anguil‚Ä¶ NA      #> # ‚Ä¶ with 17,803 more rows, 57 more variables: aphia_id <int>, #> #   animal_label <chr>, animal_nickname <chr>, tagger <chr>, #> #   capture_date_time <dttm>, capture_location <chr>, capture_latitude <dbl>, #> #   capture_longitude <dbl>, capture_method <chr>, capture_depth <chr>, #> #   capture_temperature_change <chr>, release_date_time <dttm>, #> #   release_location <chr>, release_latitude <dbl>, release_longitude <dbl>, #> #   recapture_date_time <dttm>, length1_type <chr>, length1 <dbl>, ‚Ä¶  # Get specific animals get_animals(con, animal_id = 305) # Or string value \"305\" #> # A tibble: 1 √ó 66 #>   animal_id animal_pro‚Ä¶¬π tag_s‚Ä¶¬≤ tag_t‚Ä¶¬≥ tag_s‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ scien‚Ä¶‚Å∑ commo‚Ä¶‚Å∏ #>       <int> <chr>        <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1       305 2014_demer   1187450 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #> # ‚Ä¶ with 57 more variables: aphia_id <int>, animal_label <chr>, #> #   animal_nickname <chr>, tagger <chr>, capture_date_time <dttm>, #> #   capture_location <chr>, capture_latitude <dbl>, capture_longitude <dbl>, #> #   capture_method <chr>, capture_depth <chr>, #> #   capture_temperature_change <chr>, release_date_time <dttm>, #> #   release_location <chr>, release_latitude <dbl>, release_longitude <dbl>, #> #   recapture_date_time <dttm>, length1_type <chr>, length1 <dbl>, ‚Ä¶ get_animals(con, animal_id = c(304, 305, 2827)) #> # A tibble: 3 √ó 66 #>   animal_id animal_pro‚Ä¶¬π tag_s‚Ä¶¬≤ tag_t‚Ä¶¬≥ tag_s‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ scien‚Ä¶‚Å∑ commo‚Ä¶‚Å∏ #>       <int> <chr>        <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1       304 2014_demer   1187449 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #> 2       305 2014_demer   1187450 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #> 3      2827 2015_phd_ve‚Ä¶ 127105‚Ä¶ acoust‚Ä¶ animal‚Ä¶ A69-90‚Ä¶ \",\"     Gadus ‚Ä¶ Atlant‚Ä¶ #> # ‚Ä¶ with 57 more variables: aphia_id <int>, animal_label <chr>, #> #   animal_nickname <chr>, tagger <chr>, capture_date_time <dttm>, #> #   capture_location <chr>, capture_latitude <dbl>, capture_longitude <dbl>, #> #   capture_method <chr>, capture_depth <chr>, #> #   capture_temperature_change <chr>, release_date_time <dttm>, #> #   release_location <chr>, release_latitude <dbl>, release_longitude <dbl>, #> #   recapture_date_time <dttm>, length1_type <chr>, length1 <dbl>, ‚Ä¶  # Get animals from specific animal project(s) get_animals(con, animal_project_code = \"2014_demer\") #> # A tibble: 16 √ó 66 #>    animal_id animal_pr‚Ä¶¬π tag_s‚Ä¶¬≤ tag_t‚Ä¶¬≥ tag_s‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ scien‚Ä¶‚Å∑ commo‚Ä¶‚Å∏ #>        <int> <chr>       <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1       304 2014_demer  1187449 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #>  2       384 2014_demer  1157781 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  3       385 2014_demer  1157782 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  4       386 2014_demer  1157783 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  5       305 2014_demer  1187450 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #>  6       383 2014_demer  1157780 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Squali‚Ä¶ chub    #>  7       369 2014_demer  1171781 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  8       370 2014_demer  1171782 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  9       365 2014_demer  1171775 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #> 10       366 2014_demer  1171776 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #> 11       368 2014_demer  1171780 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #> 12       382 2014_demer  1157779 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Squali‚Ä¶ chub    #> 13       371 2014_demer  1171783 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Petrom‚Ä¶ sea la‚Ä¶ #> 14       372 2014_demer  1171784 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Squali‚Ä¶ chub    #> 15       367 2014_demer  1171777 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #> 16       306 2014_demer  1187468 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Petrom‚Ä¶ sea la‚Ä¶ #> # ‚Ä¶ with 57 more variables: aphia_id <int>, animal_label <chr>, #> #   animal_nickname <chr>, tagger <chr>, capture_date_time <dttm>, #> #   capture_location <chr>, capture_latitude <dbl>, capture_longitude <dbl>, #> #   capture_method <chr>, capture_depth <chr>, #> #   capture_temperature_change <chr>, release_date_time <dttm>, #> #   release_location <chr>, release_latitude <dbl>, release_longitude <dbl>, #> #   recapture_date_time <dttm>, length1_type <chr>, length1 <dbl>, ‚Ä¶ get_animals(con, animal_project_code = c(\"2014_demer\", \"2015_dijle\")) #> # A tibble: 42 √ó 66 #>    animal_id animal_pr‚Ä¶¬π tag_s‚Ä¶¬≤ tag_t‚Ä¶¬≥ tag_s‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ scien‚Ä¶‚Å∑ commo‚Ä¶‚Å∏ #>        <int> <chr>       <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1       304 2014_demer  1187449 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #>  2       384 2014_demer  1157781 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  3       385 2014_demer  1157782 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  4       386 2014_demer  1157783 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  5       305 2014_demer  1187450 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #>  6       383 2014_demer  1157780 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Squali‚Ä¶ chub    #>  7       369 2014_demer  1171781 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  8       370 2014_demer  1171782 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  9       365 2014_demer  1171775 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #> 10       366 2014_demer  1171776 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #> # ‚Ä¶ with 32 more rows, 57 more variables: aphia_id <int>, animal_label <chr>, #> #   animal_nickname <chr>, tagger <chr>, capture_date_time <dttm>, #> #   capture_location <chr>, capture_latitude <dbl>, capture_longitude <dbl>, #> #   capture_method <chr>, capture_depth <chr>, #> #   capture_temperature_change <chr>, release_date_time <dttm>, #> #   release_location <chr>, release_latitude <dbl>, release_longitude <dbl>, #> #   recapture_date_time <dttm>, length1_type <chr>, length1 <dbl>, ‚Ä¶  # Get animals associated with a specific tag_serial_number get_animals(con, tag_serial_number = \"1187450\") #> # A tibble: 1 √ó 66 #>   animal_id animal_pro‚Ä¶¬π tag_s‚Ä¶¬≤ tag_t‚Ä¶¬≥ tag_s‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ scien‚Ä¶‚Å∑ commo‚Ä¶‚Å∏ #>       <int> <chr>        <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1       305 2014_demer   1187450 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #> # ‚Ä¶ with 57 more variables: aphia_id <int>, animal_label <chr>, #> #   animal_nickname <chr>, tagger <chr>, capture_date_time <dttm>, #> #   capture_location <chr>, capture_latitude <dbl>, capture_longitude <dbl>, #> #   capture_method <chr>, capture_depth <chr>, #> #   capture_temperature_change <chr>, release_date_time <dttm>, #> #   release_location <chr>, release_latitude <dbl>, release_longitude <dbl>, #> #   recapture_date_time <dttm>, length1_type <chr>, length1 <dbl>, ‚Ä¶  # Get animals of specific species (across all projects) get_animals(con, scientific_name = c(\"Rutilus rutilus\", \"Silurus glanis\")) #> # A tibble: 66 √ó 66 #>    animal_id animal_pr‚Ä¶¬π tag_s‚Ä¶¬≤ tag_t‚Ä¶¬≥ tag_s‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ scien‚Ä¶‚Å∑ commo‚Ä¶‚Å∏ #>        <int> <chr>       <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1       304 2014_demer  1187449 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #>  2       384 2014_demer  1157781 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  3       385 2014_demer  1157782 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  4       386 2014_demer  1157783 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  5       305 2014_demer  1187450 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #>  6       369 2014_demer  1171781 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  7       370 2014_demer  1171782 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  8       365 2014_demer  1171775 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #>  9       366 2014_demer  1171776 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #> 10       368 2014_demer  1171780 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Siluru‚Ä¶ wels c‚Ä¶ #> # ‚Ä¶ with 56 more rows, 57 more variables: aphia_id <int>, animal_label <chr>, #> #   animal_nickname <chr>, tagger <chr>, capture_date_time <dttm>, #> #   capture_location <chr>, capture_latitude <dbl>, capture_longitude <dbl>, #> #   capture_method <chr>, capture_depth <chr>, #> #   capture_temperature_change <chr>, release_date_time <dttm>, #> #   release_location <chr>, release_latitude <dbl>, release_longitude <dbl>, #> #   recapture_date_time <dttm>, length1_type <chr>, length1 <dbl>, ‚Ä¶  # Get animals of a specific species from a specific project get_animals(con, animal_project_code = \"2014_demer\", scientific_name = \"Rutilus rutilus\") #> # A tibble: 2 √ó 66 #>   animal_id animal_pro‚Ä¶¬π tag_s‚Ä¶¬≤ tag_t‚Ä¶¬≥ tag_s‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ scien‚Ä¶‚Å∑ commo‚Ä¶‚Å∏ #>       <int> <chr>        <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1       304 2014_demer   1187449 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #> 2       305 2014_demer   1187450 acoust‚Ä¶ animal  A69-16‚Ä¶ \"\"      Rutilu‚Ä¶ roach   #> # ‚Ä¶ with 57 more variables: aphia_id <int>, animal_label <chr>, #> #   animal_nickname <chr>, tagger <chr>, capture_date_time <dttm>, #> #   capture_location <chr>, capture_latitude <dbl>, capture_longitude <dbl>, #> #   capture_method <chr>, capture_depth <chr>, #> #   capture_temperature_change <chr>, release_date_time <dttm>, #> #   release_location <chr>, release_latitude <dbl>, release_longitude <dbl>, #> #   recapture_date_time <dttm>, length1_type <chr>, length1 <dbl>, ‚Ä¶"},{"path":"/reference/get_cpod_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cpod project data ‚Äî get_cpod_projects","title":"Get cpod project data ‚Äî get_cpod_projects","text":"Get data cpod projects, options filter results.","code":""},{"path":"/reference/get_cpod_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cpod project data ‚Äî get_cpod_projects","text":"","code":"get_cpod_projects(connection = con, cpod_project_code = NULL)"},{"path":"/reference/get_cpod_projects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cpod project data ‚Äî get_cpod_projects","text":"connection connection ETN database. Defaults con. cpod_project_code Character (vector). One cpod project codes. Case-insensitive.","code":""},{"path":"/reference/get_cpod_projects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cpod project data ‚Äî get_cpod_projects","text":"tibble animal project data, sorted project_code. See also field definitions.","code":""},{"path":"/reference/get_cpod_projects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cpod project data ‚Äî get_cpod_projects","text":"","code":"# Set default connection variable con <- connect_to_etn()  # Get all animal projects get_cpod_projects(con) #> # A tibble: 8 √ó 11 #>   projec‚Ä¶¬π proje‚Ä¶¬≤ proje‚Ä¶¬≥ telem‚Ä¶‚Å¥ proje‚Ä¶‚Åµ start_date end_date   latit‚Ä¶‚Å∂ longi‚Ä¶‚Å∑ #>      <int> <chr>   <chr>   <chr>   <chr>   <date>     <date>       <dbl>   <dbl> #> 1      880 Apelaf‚Ä¶ cpod    NA      Apelaf‚Ä¶ 2021-01-01 2023-12-31    NA     NA    #> 2      973 Apelaf‚Ä¶ cpod    NA      Acoust‚Ä¶ 2021-01-01 2023-12-31    NA     NA    #> 3      948 PhD_Pa‚Ä¶ cpod    NA      PhD_Pa‚Ä¶ 2021-03-09 NA            NA     NA    #> 4      902 SMGMIT  cpod    Acoust‚Ä¶ SeaMon‚Ä¶ 2019-04-10 2022-12-31    54.5   -9.46 #> 5      838 VLIZ-M‚Ä¶ cpod    NA      VLIZ-M‚Ä¶ NA         NA            NA     NA    #> 6      839 VLIZ-M‚Ä¶ cpod    NA      VLIZ-M‚Ä¶ NA         NA            NA     NA    #> 7      638 cpod-l‚Ä¶ cpod    NA      Lifewa‚Ä¶ 2015-06-01 NA            NA     NA    #> 8      639 cpod-o‚Ä¶ cpod    NA      WinMon‚Ä¶ 2010-01-01 NA            NA     NA    #> # ‚Ä¶ with 2 more variables: moratorium <chr>, imis_dataset_id <int>, and #> #   abbreviated variable names ¬π‚Äãproject_id, ¬≤‚Äãproject_code, ¬≥‚Äãproject_type, #> #   ‚Å¥‚Äãtelemetry_type, ‚Åµ‚Äãproject_name, ‚Å∂‚Äãlatitude, ‚Å∑‚Äãlongitude  # Get a specific animal project get_cpod_projects(con, cpod_project_code = \"cpod-lifewatch\") #> # A tibble: 1 √ó 11 #>   projec‚Ä¶¬π proje‚Ä¶¬≤ proje‚Ä¶¬≥ telem‚Ä¶‚Å¥ proje‚Ä¶‚Åµ start_date end_date latitude longit‚Ä¶‚Å∂ #>      <int> <chr>   <chr>   <chr>   <chr>   <date>     <date>      <dbl>    <dbl> #> 1      638 cpod-l‚Ä¶ cpod    NA      Lifewa‚Ä¶ 2015-06-01 NA             NA       NA #> # ‚Ä¶ with 2 more variables: moratorium <chr>, imis_dataset_id <int>, and #> #   abbreviated variable names ¬π‚Äãproject_id, ¬≤‚Äãproject_code, ¬≥‚Äãproject_type, #> #   ‚Å¥‚Äãtelemetry_type, ‚Åµ‚Äãproject_name, ‚Å∂‚Äãlongitude"},{"path":"/reference/get_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tag data ‚Äî get_tags","title":"Get tag data ‚Äî get_tags","text":"Get data tags, options filter results. Note can multiple records (acoustic_tag_id) per tag device (tag_serial_number).","code":""},{"path":"/reference/get_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tag data ‚Äî get_tags","text":"","code":"get_tags(   connection = con,   tag_type = NULL,   tag_subtype = NULL,   tag_serial_number = NULL,   acoustic_tag_id = NULL )"},{"path":"/reference/get_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tag data ‚Äî get_tags","text":"connection connection ETN database. Defaults con. tag_type Character (vector). acoustic archival. tags , find acoustic-archival. tag_subtype Character (vector). animal, built-, range sentinel. tag_serial_number Character (vector). One tag serial numbers. acoustic_tag_id Character (vector). One acoustic tag identifiers, .e. identifiers found get_acoustic_detections().","code":""},{"path":"/reference/get_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tag data ‚Äî get_tags","text":"tibble tags data, sorted tag_serial_number. See also field definitions. Values owner_organization owner_pi visible member group.","code":""},{"path":"/reference/get_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tag data ‚Äî get_tags","text":"","code":"# Set default connection variable con <- connect_to_etn()  # Get all tags get_tags(con) #> # A tibble: 22,882 √ó 54 #>    tag_se‚Ä¶¬π tag_t‚Ä¶¬≤ tag_s‚Ä¶¬≥ senso‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ manuf‚Ä¶‚Å∑ model frequ‚Ä¶‚Å∏ status #>    <chr>    <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr> <chr>   <chr>  #>  1 10       acoust‚Ä¶ animal  NA      S256-10 A69-11‚Ä¶ THELMA‚Ä¶ LP6-D 69 kHz  active #>  2 11       acoust‚Ä¶ animal  NA      S256-11 A69-11‚Ä¶ THELMA‚Ä¶ LP6-D 69 kHz  active #>  3 12       acoust‚Ä¶ animal  NA      S256-12 A69-11‚Ä¶ THELMA‚Ä¶ LP6-D 69 kHz  active #>  4 13       acoust‚Ä¶ animal  NA      S256-13 A69-11‚Ä¶ THELMA‚Ä¶ LP6-D 69 kHz  active #>  5 14       acoust‚Ä¶ animal  NA      S256-14 A69-11‚Ä¶ THELMA‚Ä¶ LP6-D 69 kHz  active #>  6 15       acoust‚Ä¶ animal  NA      S256-15 A69-11‚Ä¶ THELMA‚Ä¶ LP6-D 69 kHz  active #>  7 16       acoust‚Ä¶ animal  NA      S256-16 A69-11‚Ä¶ THELMA‚Ä¶ LP6-D 69 kHz  active #>  8 17       acoust‚Ä¶ animal  NA      S256-17 A69-11‚Ä¶ THELMA‚Ä¶ LP6-D 69 kHz  active #>  9 18       acoust‚Ä¶ animal  NA      S256-18 A69-11‚Ä¶ THELMA‚Ä¶ LP6-D 69 kHz  active #> 10 19       acoust‚Ä¶ animal  NA      S256-19 A69-11‚Ä¶ THELMA‚Ä¶ LP6-D 69 kHz  active #> # ‚Ä¶ with 22,872 more rows, 44 more variables: activation_date <dttm>, #> #   battery_estimated_life <chr>, battery_estimated_end_date <dttm>, #> #   length <dbl>, diameter <dbl>, weight <dbl>, floating <chr>, #> #   archive_memory <chr>, sensor_slope <dbl>, sensor_intercept <dbl>, #> #   sensor_range <chr>, sensor_range_min <dbl>, sensor_range_max <dbl>, #> #   sensor_resolution <dbl>, sensor_unit <chr>, sensor_accuracy <dbl>, #> #   sensor_transmit_ratio <int>, accelerometer_algorithm <chr>, ‚Ä¶  # Get archival tags, including acoustic-archival get_tags(con, tag_type = c(\"archival\", \"acoustic-archival\")) #> # A tibble: 3,826 √ó 54 #>    tag_se‚Ä¶¬π tag_t‚Ä¶¬≤ tag_s‚Ä¶¬≥ senso‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ manuf‚Ä¶‚Å∑ model frequ‚Ä¶‚Å∏ status #>    <chr>    <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr> <chr>   <chr>  #>  1 4879H    acoust‚Ä¶ animal  NA      A69-13‚Ä¶ R64K-5‚Ä¶ VEMCO   V13-‚Ä¶ NA      avail‚Ä¶ #>  2 4880H    acoust‚Ä¶ animal  NA      A69-13‚Ä¶ R64K-5‚Ä¶ VEMCO   V13-‚Ä¶ NA      avail‚Ä¶ #>  3 4882H    acoust‚Ä¶ animal  NA      A69-13‚Ä¶ R64K-5‚Ä¶ VEMCO   V13-‚Ä¶ NA      avail‚Ä¶ #>  4 31537    acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ NA      active #>  5 31538    acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ NA      active #>  6 31539    acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ NA      active #>  7 31540    acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ NA      active #>  8 31541    acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ NA      active #>  9 31542    acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ NA      active #> 10 31543    acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V13-‚Ä¶ NA      active #> # ‚Ä¶ with 3,816 more rows, 44 more variables: activation_date <dttm>, #> #   battery_estimated_life <chr>, battery_estimated_end_date <dttm>, #> #   length <dbl>, diameter <dbl>, weight <dbl>, floating <chr>, #> #   archive_memory <chr>, sensor_slope <dbl>, sensor_intercept <dbl>, #> #   sensor_range <chr>, sensor_range_min <dbl>, sensor_range_max <dbl>, #> #   sensor_resolution <dbl>, sensor_unit <chr>, sensor_accuracy <dbl>, #> #   sensor_transmit_ratio <int>, accelerometer_algorithm <chr>, ‚Ä¶  # Get tags of specific subtype get_tags(con, tag_subtype = c(\"built-in\", \"range\")) #> # A tibble: 299 √ó 54 #>    tag_se‚Ä¶¬π tag_t‚Ä¶¬≤ tag_s‚Ä¶¬≥ senso‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ manuf‚Ä¶‚Å∑ model frequ‚Ä¶‚Å∏ status #>    <chr>    <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr> <chr>   <chr>  #>  1 2060     acoust‚Ä¶ built-‚Ä¶ NA      R01M-8‚Ä¶ NA      THELMA‚Ä¶ TBR8‚Ä¶ 069k    avail‚Ä¶ #>  2 2061     acoust‚Ä¶ built-‚Ä¶ NA      R01M-8‚Ä¶ NA      THELMA‚Ä¶ TBR8‚Ä¶ 069k    avail‚Ä¶ #>  3 2063     acoust‚Ä¶ built-‚Ä¶ NA      R01M-8‚Ä¶ NA      THELMA‚Ä¶ TBR8‚Ä¶ 069k    avail‚Ä¶ #>  4 2066     acoust‚Ä¶ built-‚Ä¶ NA      R01M-8‚Ä¶ NA      THELMA‚Ä¶ TBR8‚Ä¶ 069k    avail‚Ä¶ #>  5 2067     acoust‚Ä¶ built-‚Ä¶ NA      R01M-8‚Ä¶ NA      THELMA‚Ä¶ TBR8‚Ä¶ 069k    avail‚Ä¶ #>  6 2068     acoust‚Ä¶ built-‚Ä¶ NA      R01M-8‚Ä¶ NA      THELMA‚Ä¶ TBR8‚Ä¶ 069k    avail‚Ä¶ #>  7 2070     acoust‚Ä¶ built-‚Ä¶ NA      R01M-8‚Ä¶ NA      THELMA‚Ä¶ TBR8‚Ä¶ 069k    avail‚Ä¶ #>  8 2071     acoust‚Ä¶ built-‚Ä¶ NA      R01M-8‚Ä¶ NA      THELMA‚Ä¶ TBR8‚Ä¶ 069k    avail‚Ä¶ #>  9 2072     acoust‚Ä¶ built-‚Ä¶ NA      R01M-8‚Ä¶ NA      THELMA‚Ä¶ TBR8‚Ä¶ 069k    avail‚Ä¶ #> 10 2073     acoust‚Ä¶ built-‚Ä¶ NA      R01M-8‚Ä¶ NA      THELMA‚Ä¶ TBR8‚Ä¶ 069k    avail‚Ä¶ #> # ‚Ä¶ with 289 more rows, 44 more variables: activation_date <dttm>, #> #   battery_estimated_life <chr>, battery_estimated_end_date <dttm>, #> #   length <dbl>, diameter <dbl>, weight <dbl>, floating <chr>, #> #   archive_memory <chr>, sensor_slope <dbl>, sensor_intercept <dbl>, #> #   sensor_range <chr>, sensor_range_min <dbl>, sensor_range_max <dbl>, #> #   sensor_resolution <dbl>, sensor_unit <chr>, sensor_accuracy <dbl>, #> #   sensor_transmit_ratio <int>, accelerometer_algorithm <chr>, ‚Ä¶  # Get specific tags (note that these can return multiple records) get_tags(con, tag_serial_number = \"1187450\") #> # A tibble: 1 √ó 54 #>   tag_ser‚Ä¶¬π tag_t‚Ä¶¬≤ tag_s‚Ä¶¬≥ senso‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ manuf‚Ä¶‚Å∑ model frequ‚Ä¶‚Å∏ status #>   <chr>     <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr> <chr>   <chr>  #> 1 1187450   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V7-4x 069k    avail‚Ä¶ #> # ‚Ä¶ with 44 more variables: activation_date <dttm>, #> #   battery_estimated_life <chr>, battery_estimated_end_date <dttm>, #> #   length <dbl>, diameter <dbl>, weight <dbl>, floating <chr>, #> #   archive_memory <chr>, sensor_slope <dbl>, sensor_intercept <dbl>, #> #   sensor_range <chr>, sensor_range_min <dbl>, sensor_range_max <dbl>, #> #   sensor_resolution <dbl>, sensor_unit <chr>, sensor_accuracy <dbl>, #> #   sensor_transmit_ratio <int>, accelerometer_algorithm <chr>, ‚Ä¶ get_tags(con, acoustic_tag_id = \"A69-1601-16130\") #> # A tibble: 1 √ó 54 #>   tag_ser‚Ä¶¬π tag_t‚Ä¶¬≤ tag_s‚Ä¶¬≥ senso‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ manuf‚Ä¶‚Å∑ model frequ‚Ä¶‚Å∏ status #>   <chr>     <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr> <chr>   <chr>  #> 1 1187450   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V7-4x 069k    avail‚Ä¶ #> # ‚Ä¶ with 44 more variables: activation_date <dttm>, #> #   battery_estimated_life <chr>, battery_estimated_end_date <dttm>, #> #   length <dbl>, diameter <dbl>, weight <dbl>, floating <chr>, #> #   archive_memory <chr>, sensor_slope <dbl>, sensor_intercept <dbl>, #> #   sensor_range <chr>, sensor_range_min <dbl>, sensor_range_max <dbl>, #> #   sensor_resolution <dbl>, sensor_unit <chr>, sensor_accuracy <dbl>, #> #   sensor_transmit_ratio <int>, accelerometer_algorithm <chr>, ‚Ä¶ get_tags(con, acoustic_tag_id = c(\"A69-1601-16129\", \"A69-1601-16130\")) #> # A tibble: 2 √ó 54 #>   tag_ser‚Ä¶¬π tag_t‚Ä¶¬≤ tag_s‚Ä¶¬≥ senso‚Ä¶‚Å¥ acous‚Ä¶‚Åµ acous‚Ä¶‚Å∂ manuf‚Ä¶‚Å∑ model frequ‚Ä¶‚Å∏ status #>   <chr>     <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr> <chr>   <chr>  #> 1 1187449   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V7-4x 069k    avail‚Ä¶ #> 2 1187450   acoust‚Ä¶ animal  NA      A69-16‚Ä¶ NA      VEMCO   V7-4x 069k    avail‚Ä¶ #> # ‚Ä¶ with 44 more variables: activation_date <dttm>, #> #   battery_estimated_life <chr>, battery_estimated_end_date <dttm>, #> #   length <dbl>, diameter <dbl>, weight <dbl>, floating <chr>, #> #   archive_memory <chr>, sensor_slope <dbl>, sensor_intercept <dbl>, #> #   sensor_range <chr>, sensor_range_min <dbl>, sensor_range_max <dbl>, #> #   sensor_resolution <dbl>, sensor_unit <chr>, sensor_accuracy <dbl>, #> #   sensor_transmit_ratio <int>, accelerometer_algorithm <chr>, ‚Ä¶"},{"path":"/reference/list_acoustic_project_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available acoustic project codes ‚Äî list_acoustic_project_codes","title":"List all available acoustic project codes ‚Äî list_acoustic_project_codes","text":"List available acoustic project codes","code":""},{"path":"/reference/list_acoustic_project_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available acoustic project codes ‚Äî list_acoustic_project_codes","text":"","code":"list_acoustic_project_codes(connection = con)"},{"path":"/reference/list_acoustic_project_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available acoustic project codes ‚Äî list_acoustic_project_codes","text":"connection connection ETN database. Defaults con.","code":""},{"path":"/reference/list_acoustic_project_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available acoustic project codes ‚Äî list_acoustic_project_codes","text":"vector unique project_code type = \"acoustic\" project.sql.","code":""},{"path":"/reference/list_acoustic_tag_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available acoustic tag ids ‚Äî list_acoustic_tag_ids","title":"List all available acoustic tag ids ‚Äî list_acoustic_tag_ids","text":"List available acoustic tag ids","code":""},{"path":"/reference/list_acoustic_tag_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available acoustic tag ids ‚Äî list_acoustic_tag_ids","text":"","code":"list_acoustic_tag_ids(connection = con)"},{"path":"/reference/list_acoustic_tag_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available acoustic tag ids ‚Äî list_acoustic_tag_ids","text":"connection connection ETN database. Defaults con.","code":""},{"path":"/reference/list_acoustic_tag_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available acoustic tag ids ‚Äî list_acoustic_tag_ids","text":"vector unique acoustic_tag_id acoustic_tag_id.sql.","code":""},{"path":"/reference/list_animal_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available animal ids ‚Äî list_animal_ids","title":"List all available animal ids ‚Äî list_animal_ids","text":"List available animal ids","code":""},{"path":"/reference/list_animal_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available animal ids ‚Äî list_animal_ids","text":"","code":"list_animal_ids(connection = con)"},{"path":"/reference/list_animal_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available animal ids ‚Äî list_animal_ids","text":"connection connection ETN database. Defaults con.","code":""},{"path":"/reference/list_animal_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available animal ids ‚Äî list_animal_ids","text":"vector unique id_pk present common.animal_release.","code":""},{"path":"/reference/list_animal_project_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available animal project codes ‚Äî list_animal_project_codes","title":"List all available animal project codes ‚Äî list_animal_project_codes","text":"List available animal project codes","code":""},{"path":"/reference/list_animal_project_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available animal project codes ‚Äî list_animal_project_codes","text":"","code":"list_animal_project_codes(connection = con)"},{"path":"/reference/list_animal_project_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available animal project codes ‚Äî list_animal_project_codes","text":"connection connection ETN database. Defaults con.","code":""},{"path":"/reference/list_animal_project_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available animal project codes ‚Äî list_animal_project_codes","text":"vector unique project_code type = \"animal\" project.sql.","code":""},{"path":"/reference/list_cpod_project_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available cpod project codes ‚Äî list_cpod_project_codes","title":"List all available cpod project codes ‚Äî list_cpod_project_codes","text":"List available cpod project codes","code":""},{"path":"/reference/list_cpod_project_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available cpod project codes ‚Äî list_cpod_project_codes","text":"","code":"list_cpod_project_codes(connection = con)"},{"path":"/reference/list_cpod_project_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available cpod project codes ‚Äî list_cpod_project_codes","text":"connection connection ETN database. Defaults con.","code":""},{"path":"/reference/list_cpod_project_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available cpod project codes ‚Äî list_cpod_project_codes","text":"vector unique project_code type = \"cpod\" project.sql.","code":""},{"path":"/reference/list_deployment_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available receiver ids ‚Äî list_deployment_ids","title":"List all available receiver ids ‚Äî list_deployment_ids","text":"List available receiver ids","code":""},{"path":"/reference/list_deployment_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available receiver ids ‚Äî list_deployment_ids","text":"","code":"list_deployment_ids(connection = con)"},{"path":"/reference/list_deployment_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available receiver ids ‚Äî list_deployment_ids","text":"connection connection ETN database. Defaults con.","code":""},{"path":"/reference/list_deployment_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available receiver ids ‚Äî list_deployment_ids","text":"vector unique id_pk present acoustic.deployments.","code":""},{"path":"/reference/list_receiver_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available receiver ids ‚Äî list_receiver_ids","title":"List all available receiver ids ‚Äî list_receiver_ids","text":"List available receiver ids","code":""},{"path":"/reference/list_receiver_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available receiver ids ‚Äî list_receiver_ids","text":"","code":"list_receiver_ids(connection = con)"},{"path":"/reference/list_receiver_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available receiver ids ‚Äî list_receiver_ids","text":"connection connection ETN database. Defaults con.","code":""},{"path":"/reference/list_receiver_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available receiver ids ‚Äî list_receiver_ids","text":"vector unique receiver present acoustic.receivers.","code":""},{"path":"/reference/list_scientific_names.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available scientific names ‚Äî list_scientific_names","title":"List all available scientific names ‚Äî list_scientific_names","text":"List available scientific names","code":""},{"path":"/reference/list_scientific_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available scientific names ‚Äî list_scientific_names","text":"","code":"list_scientific_names(connection = con)"},{"path":"/reference/list_scientific_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available scientific names ‚Äî list_scientific_names","text":"connection connection ETN database. Defaults con.","code":""},{"path":"/reference/list_scientific_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available scientific names ‚Äî list_scientific_names","text":"vector unique scientific_name present common.animal_release.","code":""},{"path":"/reference/list_station_names.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available station names ‚Äî list_station_names","title":"List all available station names ‚Äî list_station_names","text":"List available station names","code":""},{"path":"/reference/list_station_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available station names ‚Äî list_station_names","text":"","code":"list_station_names(connection = con)"},{"path":"/reference/list_station_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available station names ‚Äî list_station_names","text":"connection connection ETN database. Defaults con.","code":""},{"path":"/reference/list_station_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available station names ‚Äî list_station_names","text":"vector unique station_name present acoustic.deployments.","code":""},{"path":"/reference/list_tag_serial_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available tag serial numbers ‚Äî list_tag_serial_numbers","title":"List all available tag serial numbers ‚Äî list_tag_serial_numbers","text":"List available tag serial numbers","code":""},{"path":"/reference/list_tag_serial_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available tag serial numbers ‚Äî list_tag_serial_numbers","text":"","code":"list_tag_serial_numbers(connection = con)"},{"path":"/reference/list_tag_serial_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available tag serial numbers ‚Äî list_tag_serial_numbers","text":"connection connection ETN database. Defaults con.","code":""},{"path":"/reference/list_tag_serial_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available tag serial numbers ‚Äî list_tag_serial_numbers","text":"vector unique tag_serial_numbers present common.tag_device.","code":""},{"path":"/reference/list_values.html","id":null,"dir":"Reference","previous_headings":"","what":"List all unique values from a data.frame column ‚Äî list_values","title":"List all unique values from a data.frame column ‚Äî list_values","text":"Get vector unique values found given column data.frame. Concatenated values (,B) column can returned single values (B).","code":""},{"path":"/reference/list_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all unique values from a data.frame column ‚Äî list_values","text":"","code":"list_values(.data, column, split = \",\")"},{"path":"/reference/list_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all unique values from a data.frame column ‚Äî list_values","text":".data Data frame. Data.frame select column . column Character integer. Quoted unqoted column name column position. split Character (vector). Character regular expression(s) passed strsplit() split column values returning unique values. Defaults ,.","code":""},{"path":"/reference/list_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all unique values from a data.frame column ‚Äî list_values","text":"vector type given column.","code":""},{"path":"/reference/list_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all unique values from a data.frame column ‚Äî list_values","text":"","code":"# Set default connection variable con <- connect_to_etn() library(dplyr) # For %>% #>  #> Attaching package: ‚Äòdplyr‚Äô #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     filter, lag #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     intersect, setdiff, setequal, union  # List unique scientific_name from a dataframe containing animal information df <- get_animals(con, animal_project_code = \"2014_demer\") list_values(df, \"scientific_name\") #> 4 unique scientific_name values #> [1] \"Rutilus rutilus\"    \"Silurus glanis\"     \"Squalius cephalus\"  #> [4] \"Petromyzon marinus\"  # Or using pipe and unquoted column name df %>% list_values(scientific_name) #> 4 unique scientific_name values #> [1] \"Rutilus rutilus\"    \"Silurus glanis\"     \"Squalius cephalus\"  #> [4] \"Petromyzon marinus\"  # Or using column position df %>% list_values(8) #> 1 unique scientific_name values #> # A tibble: 4 √ó 1 #>   scientific_name    #>   <chr>              #> 1 Rutilus rutilus    #> 2 Silurus glanis     #> 3 Squalius cephalus  #> 4 Petromyzon marinus  # tag_serial_number can contain comma-separated values df <- get_animals(con, animal_id = 5841) df$tag_serial_number #> [1] \"1280688,1280688\"  # list_values() will split those and return unique values list_values(df, tag_serial_number) #> 1 unique tag_serial_number values #> [1] \"1280688\"  # Another expression can be defined to split values (here \".\") list_values(df, tag_serial_number, split = \"\\\\.\") #> 1 unique tag_serial_number values #> [1] \"1280688,1280688\""},{"path":"/reference/write_dwc.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform ETN data to Darwin Core ‚Äî write_dwc","title":"Transform ETN data to Darwin Core ‚Äî write_dwc","text":"Transforms downloads data European Tracking Network animal project Darwin Core. resulting CSV file(s) can uploaded IPT publication OBIS /GBIF. meta.xml eml.xml file created.","code":""},{"path":"/reference/write_dwc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform ETN data to Darwin Core ‚Äî write_dwc","text":"","code":"write_dwc(   connection = con,   animal_project_code,   directory = \".\",   rights_holder = NULL,   license = \"CC-BY\" )"},{"path":"/reference/write_dwc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform ETN data to Darwin Core ‚Äî write_dwc","text":"connection Connection ETN database. animal_project_code Animal project code. directory Path local directory write file(s) . NULL, list data frames returned instead, can useful extending/adapting Darwin Core mapping writing readr::write_csv(). rights_holder Acronym organization owning managing rights data. license Identifier license data published. CC-(default). CC0.","code":""},{"path":"/reference/write_dwc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform ETN data to Darwin Core ‚Äî write_dwc","text":"CSV file(s) written disk list data frames directory = NULL.","code":""},{"path":"/reference/write_dwc.html","id":"transformation-details","dir":"Reference","previous_headings":"","what":"Transformation details","title":"Transform ETN data to Darwin Core ‚Äî write_dwc","text":"Data transformed Occurrence core. follows recommendations discussed created Peter Desmet, Jonas Mortelmans, Jonathan Pye, John Wieczorek others. See SQL file(s) used function details. Key features Darwin Core transformation: Deployments (animal+tag associations) parent events, capture, surgery, release, recapture (human observations) acoustic detections (machine observations) child events. information parent event provided ID, meaning data can expressed Occurrence Core one row per observation parentEventID shared occurrences deployment. release event often contains metadata animal (sex, lifestage, comments) deployment whole. Acoustic detections downsampled first detection per hour, reduce size high-frequency data. Duplicate detections (animal, tag timestamp) excluded. possible deployment contain detections, e.g. tag malfunctioned right deployment.","code":""}]
